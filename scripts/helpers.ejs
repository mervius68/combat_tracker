<script>
    let cellCountVertical;
    let participantsHpsByRound;
    // Define the event listener function separately
    const modalClickListener = function (event) {
        if (event.target.classList.contains("modal_text_inputs")) {
            if (event.target.previousSibling.value === "") {
                event.target.previousSibling.value = "x";
            } else if (event.target.previousSibling.value === "x") {
                event.target.previousSibling.value = "";
            }
        }
    };

    async function endCondition() {
        let htmlSelected = document.querySelector(".selected");
        let selectedID = htmlSelected.getAttribute("data-participant");
        let endThisCondition = document.querySelector("[data-cm-condition-id]");
        let conditionID = endThisCondition.getAttribute("data-cm-condition-id");
        let affecteeID = endThisCondition.getAttribute("data-cm-affected-id");
        let round = endThisCondition.getAttribute("data-cm-round");
        let taid = endThisCondition.getAttribute("data-cm-taid");
        let conditionState = endThisCondition.getAttribute(
            "data-cm-concentration-or-affected"
        );
        if (conditionState == "concentration") {
            affecteeID = htmlSelected.getAttribute("data-cm-causer-id");
        }

        await dbQuery(
            "GET",
            "endCondition/" +
            conditionID +
            "/" +
            affecteeID +
            "/" +
            round +
            "/" +
            conditionState +
            "/" +
            taid
        );
        let html = document.querySelector(".selected");
        let dataNav = html.getAttribute("data-nav");
        load_encounter(0, dataNav);

    }

    async function load_encounter(encounterCode = 0, dataNav = 1) {
        try {
            document.removeEventListener("contextmenu", contextMenuListener);
        } catch (err) { }
        document.removeEventListener("keydown", keydownEventListener);
        document.removeEventListener("keydown", clickEventListener);
        cellCountVertical = 1;
        let latestID = await dbQuery("GET", "latest_eID");
        let encounterID;
        if (encounterCode == 0) {
            encounterID = latestID[0]?.eID || 0;
        } else if (encounterCode == 1) {
            // get encounterID from selected value in dropdown
            let html = document
                .querySelector(".initDropdown")
                .getAttribute("value");
        }
        if (encounterID == 0) {
            new_encounter(encounterID);
        }
        let encounter = await dbQuery(
            "GET",
            "selected_encounter/" + encounterID
        );
        let header = document.querySelector(".main_header");

        header.textContent = `${encounter[0]?.campaign || "No available encounters yet"
            } - ${encounter[0]?.location || ""} (${encounter[0]?.description || ""
            })`;

        const originalParticipants = await dbQuery("GET", "participants/" + encounterID);

        // set ctApp to originalParticipants before using reduce method on originalParticipants
        ctApp = [...originalParticipants]
        const characterNameCounts = originalParticipants.reduce((acc, obj) => {
            if (!acc[obj.character_name]) {
                acc[obj.character_name] = [obj];
            } else {
                acc[obj.character_name].push(obj);
            }
            return acc;
        }, {});

        const duplicatedCharacterNames = Object.keys(characterNameCounts).filter(
            (characterName) => characterNameCounts[characterName].length > 1
        );

        const orderedCharacterObjects = duplicatedCharacterNames.map(characterName => {
            const characterObjects = originalParticipants.filter(obj => obj.character_name === characterName);
            characterObjects.sort((a, b) => b.init - a.init); // Sort in descending order by "init"
            return characterObjects;
        });

        orderedCharacterObjects.forEach((collection) => {
            collection.sort((a, b) => b.init - a.init)
        });

        await orderedCharacterObjects.forEach(async (objects) => {
            await objects.forEach(async (obj, index) => {
                await dbQuery("GET", "arrangeParticipantsByInit/" + obj.pID + "/" + (index + 1))
            })
        })

        // get all the actions of this encounter
        // let ctActions = await dbQuery("GET", "actions/" + encounterID);
        ctActions = await dbQuery("GET", "actions/" + encounterID);
        ctActionsConditions = await dbQuery("GET", "actionsConditions/" + encounterID)

        function mergeArrays(mainArray, secondaryArray) {
            // Create a map of objects in the secondary array using aID as the key
            const secondaryMap = new Map();
            for (const obj of secondaryArray) {
                secondaryMap.set(obj.aID, obj);
            }

            // Iterate through the main array and add properties from the secondary array
            for (const obj of mainArray) {
                const matchingObj = secondaryMap.get(obj.aID);
                if (matchingObj) {
                    // Merge properties from matchingObj into obj
                    Object.assign(obj, matchingObj);
                }
            }

            return mainArray;
        }

        result = mergeArrays(ctActions, ctActionsConditions);
        ctActions = result;


        // get all the conditions of this encounter
        let ctConditions = await dbQuery(
            "GET",
            "getConditionsForCtApp/" + encounterID
        );

        // determine how many rounds are represented in the database
        let totalRounds = ctActions.reduce((max, obj) => {
            return obj.round > max ? obj.round : max;
        }, -Infinity);

        // calculate # of rounds
        let ct_damages = await dbQuery("GET", "damages/" + encounterID);
        let damageRounds = 1;
        try {
            damageRounds =
                ct_damages?.reduce((max, obj) => {
                    return obj.round > max.round ? obj : max;
                }).round || 1;
        } catch (err) { }

        // get participants hps by round
        participantsHpsByRound = await dbQuery(
            "GET",
            "hpsByRound/" + encounterID
        );

        // build the damageArray property for each participant; sub-arrays represent rounds
        ctApp.forEach((participant) => {
            participant.damageArray = [];
            for (let i = 0; i < damageRounds; i++) {
                participant.damageArray[i] = [];
                if (Array.isArray(participant.damageArray[i - 1])) {
                    participant.damageArray[i].push(
                        participant.damageArray[i - 1][
                        participant.damageArray[i - 1].length - 1
                        ]
                    );
                } else {
                    participant.damageArray[i].push(participant.starting_hp);
                }
                let x = participantsHpsByRound.filter((target) => {
                    return (
                        target.round == i + 1 &&
                        target.target_pID == participant.pID
                    );
                });
                x.forEach((item) => {
                    if (item.target_pID == participant.pID) {
                        participant.damageArray[i].push(item.new_hp);
                    }
                });
                participant.damageArray = participant.damageArray.map((arr) => {
                    return arr.filter((num, i) => {
                        return i === 0 || num !== arr[i - 1];
                    });
                });
            }
        });

        // build a conditionsArray and affectedArray properties for the participant
        ctApp.forEach((participant) => {
            participant.conditionsArray = [];
            participant.affectedArray = [];
            ctConditions.forEach((condition) => {
                if (condition.pID == participant.pID) {
                    participant.conditionsArray.push(condition);
                }
                let affectedArray = [];
                if (condition.affected_pID == participant.pID) {
                    participant.affectedArray.push(condition);
                }
                participant.conditionsArray =
                    participant.conditionsArray.filter(
                        (obj, index, self) =>
                            index ===
                            self.findIndex(
                                (t) => t.conditionID === obj.conditionID
                            )
                    );
            });
        });
        totalRounds = Math.max(totalRounds, damageRounds);

        // start a loop to build each round
        let mainContainer = document.createElement("div");
        for (let i = 1; i <= totalRounds + 1; i++) {

            // build the wireframe of first section (participants);

            let ctRound = document.createElement("div");
            ctRound.classList.add("ct_round");
            ctRound.setAttribute("data-round", i);

            let section1 = document.createElement("div");
            section1.classList.add("ct_grid4columns");
            section1.setAttribute("data-section", "1");

            let div1 = document.createElement("div");
            div1.classList.add("section");
            div1.classList.add("header");
            div1.classList.add("ct_turn_bookends");
            div1.classList.add("center");
            div1.textContent = "AC";
            let div2 = document.createElement("div");
            div2.classList.add("section");
            div2.classList.add("header");
            div2.classList.add("ct_turn_bookends");
            div2.classList.add("center");
            div2.textContent = "HP";
            let div3 = document.createElement("div");
            div3.classList.add("section");
            div3.classList.add("header");
            div3.classList.add("ct_turn_bookends");
            div3.classList.add("center");
            div3.textContent = "Character";
            let div4 = document.createElement("div");
            div4.classList.add("section");
            div4.classList.add("header");
            div4.classList.add("ct_turn_bookends");
            div4.classList.add("center");
            div4.textContent = "Init";

            section1.appendChild(div1);
            section1.appendChild(div2);
            section1.appendChild(div3);
            section1.appendChild(div4);

            ctRound.appendChild(section1);
            mainContainer.appendChild(ctRound);

            for (let j = 0; j <= ctApp.length - 1; j++) {
                let div5 = document.createElement("div");
                div5.classList.add("section");
                div5.classList.add("ct_turn_bookends");
                div5.classList.add("center");
                div5.classList.add("pointer");
                div5.setAttribute("data-participant", ctApp[j].pID);
                div5.setAttribute("data-nav", cellCountVertical);
                div5.setAttribute("tabindex", cellCountVertical);
                div5.setAttribute("data-round", i);
                cellCountVertical += 1;
                let div6 = document.createElement("div");
                div6.classList.add("section");
                div6.classList.add("ct_turn_bookends");
                div6.classList.add("center");
                let div7 = document.createElement("div");
                div7.classList.add("section");
                div7.classList.add("ct_turn_bookends");
                div7.classList.add("center");
                let div8 = document.createElement("div");
                div8.classList.add("section");
                div8.classList.add("ct_turn_bookends");
                div8.classList.add("center");
                section1.appendChild(div5);
                section1.appendChild(div6);
                section1.appendChild(div7);
                section1.appendChild(div8);
            }
            ctRound.appendChild(section1);

            // how many attack, bonus, and react sections are needed for this round?
            let attacksThisRound = [];
            let bonusThisRound = [];
            let reactThisRound = [];
            ctApp.forEach((participant) => {
                attacksThisRound.push(
                    ctActions.filter((action) => {
                        return (
                            action.pID == participant.pID &&
                            action.action_type == "attack" &&
                            action.round == i
                        );
                    })
                );
            });
            ctApp.forEach((participant) => {
                bonusThisRound.push(
                    ctActions.filter((action) => {
                        return (
                            action.pID == participant.pID &&
                            action.action_type == "bonus" &&
                            action.round == i
                        );
                    })
                );
            });
            ctApp.forEach((participant) => {
                reactThisRound.push(
                    ctActions.filter((action) => {
                        return (
                            action.pID == participant.pID &&
                            action.action_type == "react" &&
                            action.round == i
                        );
                    })
                );
            });
            let numAttacks = findLargestSubarray(attacksThisRound);
            numAttacks = Math.max(numAttacks, 1);
            let bonusActions = findLargestSubarray(bonusThisRound);
            let reactActions = findLargestSubarray(reactThisRound);

            // build the attack section(s), empty; we'll fill 'em up at the end of the loop
            let sectionHTML = buildASection(
                "attack",
                ctRound,
                numAttacks,
                ctApp
            );
            mainContainer.appendChild(sectionHTML);

            // build the bonus section if there is one, empty.
            sectionHTML = buildASection(
                "bonus",
                ctRound,
                bonusActions,
                ctApp
            );
            mainContainer.appendChild(sectionHTML);

            // build the reaction section if there is one, empty
            sectionHTML = buildASection(
                "react",
                ctRound,
                reactActions,
                ctApp
            );
            mainContainer.appendChild(sectionHTML);

            // build the final section, empty
            let section2 = document.createElement("div");
            section2.classList.add("ct_grid4columns");
            section2.setAttribute("data-section", 2);

            let div5 = document.createElement("div");
            div5.classList.add("section");
            div5.classList.add("header");
            div5.classList.add("ct_turn_bookends");
            div5.classList.add("center");
            div5.textContent = "Drop";
            let div6 = document.createElement("div");
            div6.classList.add("section");
            div6.classList.add("header");
            div6.classList.add("ct_turn_bookends");
            div6.classList.add("align_left");
            div6.textContent = "Start";
            let div7 = document.createElement("div");
            div7.classList.add("section");
            div7.classList.add("header");
            div7.classList.add("ct_turn_bookends");
            div7.classList.add("align_right");
            div7.textContent = "End";
            let div8 = document.createElement("div");
            div8.classList.add("section");
            div8.classList.add("header");
            div8.classList.add("ct_turn_bookends");
            div8.classList.add("center");
            div8.textContent = "Notes";
            section2.appendChild(div5);
            section2.appendChild(div6);
            section2.appendChild(div7);
            section2.appendChild(div8);

            ctApp.forEach((participant) => {
                let div9 = document.createElement("div");
                div9.classList.add("section");
                div9.classList.add("ct_turn_bookends");
                div9.classList.add("center");
                div9.setAttribute("div-participant", participant.pID);
                let div10 = document.createElement("div");
                div10.classList.add("section");
                div10.classList.add("ct_turn_bookends");
                div10.classList.add("align_left");
                let div11 = document.createElement("div");
                div11.classList.add("section");
                div11.classList.add("ct_turn_bookends");
                div11.classList.add("align_right");
                let div12 = document.createElement("div");
                div12.classList.add("section");
                div12.classList.add("ct_turn_bookends");
                div12.classList.add("center");
                section2.appendChild(div9);
                section2.appendChild(div10);
                section2.appendChild(div11);
                section2.appendChild(div12);
            });
            ctRound.appendChild(section2);

            mainContainer.appendChild(ctRound);
            let headerText = document.createElement("h2");
            headerText.textContent =
                i == totalRounds + 1 ? "" : "Round " + (i + 1);
            mainContainer.appendChild(headerText);

            let divCM = document.createElement("div");
            divCM.classList.add("custom-cm");
            let divCM2 = document.createElement("div");
            divCM2.classList.add("custom-cm__item");
            divCM2.classList.add("cmEnd");
            divCM2.innerHTML = "End This Condition";
            divCM2.setAttribute("onclick", "endCondition()");

            divCM.appendChild(divCM2);
            // divCM.appendChild(divCM3);
            // divCM.appendChild(divCMDivider);
            // divCM.appendChild(divCM4);
            mainContainer.prepend(divCM);

            // populate the sections
            let roundActions = ctActions.filter((action) => {
                return action.round == i;
            });

            // populate participants
            let participantHTML;
            ctApp.forEach(async (participant) => {
                // find latest damage report for this user;
                // if no damages at all, apply participant's starting_hp;
                // else, if no damages for this round, check previous round
                // and so on;

                // figure out hit points by round
                let roundDamages = ct_damages.filter((item) => {
                    return (
                        item.round == i && item.target_pID == participant.pID
                    );
                });
                // sort oldest to newest, e.g. hit points cell might read "22, 15, 13" (hp descending as they take hits)
                roundDamages.sort((a, b) => a.tID - b.tID);

                // locate the HTML elements for this participant
                participantHTML = mainContainer.querySelectorAll(
                    '[data-round="' +
                    i +
                    '"] [data-section="1"] [data-participant="' +
                    participant.pID +
                    '"]'
                );

                // populate row in section 1 (ac, hp, character name, and initiative value)
                participantHTML.forEach((turn, index) => {
                    // show AC on the combat tracker for this participant
                    turn.innerText =
                        participant.ac +
                        (participant.ac_secondary == null || participant.ac_secondary == ""
                            ? ""
                            : " / " + participant.ac_secondary);

                    // show hit points record for each character
                    let damageObjects = roundDamages.filter((item) => {
                        return item.target_pID == participant.pID;
                    });
                    let hps = "";
                    if (participant.damageArray[i - 1]) {
                        participant.damageArray[i - 1].forEach((hp, index) => {
                            hps +=
                                (hp == participant.starting_hp
                                    ? "<b>" + hp + "</b>"
                                    : hp) +
                                (index <
                                    participant.damageArray[i - 1].length - 1
                                    ? ", "
                                    : "");
                        });
                        turn.nextSibling.innerHTML = hps;
                    } else {
                        participant.damageArray[i - 2].forEach((hp, index) => {
                            hps =
                                (hp == participant.starting_hp
                                    ? "<b>" + hp + "</b>"
                                    : hp) +
                                (index <
                                    participant.damageArray[i - 2].length - 1
                                    ? ", "
                                    : "");
                        });
                        turn.nextSibling.innerHTML = hps;
                    }

                    // show character name
                    let characterDisplay = "";
                    if (participant.join_round <= i && participant.dead_round >= i) {
                        characterDisplay =
                            participant.character_name +
                            // (participant.numeric_value == "" || participant.numeric_value == "null"
                            (["null", "", " ", "0", 0].includes(participant.numeric_value)
                                ? ""
                                : " #" + participant.numeric_value);
                    } else {
                        let span6 = document.createElement("span");
                        span6.classList.add("participantGray");
                        span6.innerHTML = participant.character_name +
                            (participant.numeric_value == null
                                ? ""
                                : " #" + participant.numeric_value);
                        characterDisplay = span6.outerHTML;
                    }
                    turn.nextSibling.nextSibling.innerHTML = characterDisplay;

                    // if character has a condition/concentration, show icon with tooltip
                    participant.conditionsArray.forEach(async (condition) => {
                        let affecteesStill = await dbQuery(
                            "GET",
                            "anyoneStillAffected/" +
                            condition.conditionID +
                            "/" +
                            i
                        );

                        const maxValue = Math.max(
                            ...affecteesStill.map((obj) => obj.end_round)
                        );
                        const maxObjects = affecteesStill.filter(
                            (obj) => obj.end_round === maxValue
                        );

                        let affectedThisRound = ctApp.filter((item) =>
                            affecteesStill.some(
                                (obj) => obj.affected_pID === item.pID
                            )
                        );
                        let endRound = maxObjects[0]?.end_round;

                        // console.log(affectedThisRound);
                        let affectedInitLower = false;
                        if (
                            affectedThisRound.some(
                                (item) => item.init < participant.init
                            )
                        ) {
                            affectedInitLower = true;
                        }

                        let matchingObject = null;

                        // Iterate over the values array in reverse order
                        for (let i = ctApp.length - 1; i >= 0; i--) {
                            const value = ctApp[i].pID;

                            // Find the first object that matches the current value
                            matchingObject = ctApp.find(
                                (obj) => obj.pID === value
                            );

                            // If a matching object is found, exit the loop
                            if (matchingObject) {
                                break;
                            }
                        }

                        if (
                            ((parseInt(condition.concentration) == 1 || parseInt(condition.holding) == 1) &&
                                parseInt(condition.start_round) <= i &&
                                parseInt(endRound) >= i &&
                                affectedInitLower == true) ||
                            ((parseInt(condition.concentration) == 1 || parseInt(condition.holding) == 1) &&
                                parseInt(condition.start_round) <= i &&
                                parseInt(endRound) >= i &&
                                affectedInitLower == false)
                        ) {
                            // get the participants who are affected by this condition.taID
                            let affectees = await dbQuery(
                                "GET",
                                "getAffectees/" + condition.taID + "/" + i
                            );
                            let affecteesString = "";
                            affectees.forEach((affectee, index) => {
                                affecteesString +=
                                    affectee.character_name +
                                    (affectee.numeric_value
                                        ? " #" + affectee.numeric_value
                                        : "") +
                                    (index != affectees.length - 1 ? ", " : "");
                            });

                            let toolTipHTML = document.createElement("span");
                            toolTipHTML.classList.add("tooltip");
                            toolTipHTML.classList.add("concentration");
                            toolTipHTML.setAttribute(
                                "data-condition-id",
                                condition.conditionID
                            );
                            // console.log(condition.conditionID + " " + i)
                            toolTipHTML.setAttribute(
                                "data-affected-id",
                                condition.affected_pID
                            );
                            toolTipHTML.setAttribute(
                                "data-taid",
                                condition.taID
                            );
                            toolTipHTML.setAttribute(
                                "data-causerID",
                                condition.pID
                            );

                            toolTipHTML.setAttribute("data-this-round", i);
                            if (parseInt(condition.concentration) == 1) {
                                toolTipHTML.innerText = "C";
                            } else if (parseInt(condition.holding) == 1) {
                                toolTipHTML.innerText = "H";
                            }
                            // toolTipHTML.innerText = "C";
                            toolTipHTML.classList.add("hovertwin");
                            toolTipHTML.setAttribute("data-hover-id", condition.taID);
                            let toolTipText = document.createElement("span");
                            toolTipText.classList.add("tooltiptext");
                            toolTipText.innerHTML =
                                condition.description.toUpperCase() +
                                "<br><br>" +
                                participant.character_name +
                                (participant.numeric_value
                                    ? " #" + participant.numeric_value
                                    : "") +
                                " <span class='arrow-container'></span> " +
                                affecteesString;
                            toolTipHTML.appendChild(toolTipText);
                            turn.nextSibling.nextSibling.innerHTML +=
                                toolTipHTML.outerHTML;
                        }

                        // if (
                        //     (parseInt(condition.holding) == 1 &&
                        //         parseInt(condition.start_round) <= i &&
                        //         parseInt(endRound) >= i &&
                        //         affectedInitLower == true) ||
                        //     (parseInt(condition.holding) == 1 &&
                        //         parseInt(condition.start_round) <= i &&
                        //         parseInt(endRound) >= i &&
                        //         affectedInitLower == false)
                        // ) {
                        //     // get the participants who are affected by this condition.taID
                        //     let affectees = await dbQuery(
                        //         "GET",
                        //         "getAffectees/" + condition.taID + "/" + i
                        //     );
                        //     let affecteesString = "";
                        //     affectees.forEach((affectee, index) => {
                        //         affecteesString +=
                        //             affectee.character_name +
                        //             (affectee.numeric_value
                        //                 ? " #" + affectee.numeric_value
                        //                 : "") +
                        //             (index != affectees.length - 1 ? ", " : "");
                        //     });

                        //     let toolTipHTML = document.createElement("span");
                        //     toolTipHTML.classList.add("tooltip");
                        //     toolTipHTML.classList.add("concentration");
                        //     toolTipHTML.setAttribute(
                        //         "data-condition-id",
                        //         condition.conditionID
                        //     );
                        //     // console.log(condition.conditionID + " " + i)
                        //     toolTipHTML.setAttribute(
                        //         "data-affected-id",
                        //         condition.affected_pID
                        //     );
                        //     toolTipHTML.setAttribute(
                        //         "data-taid",
                        //         condition.taID
                        //     );
                        //     toolTipHTML.setAttribute(
                        //         "data-causerID",
                        //         condition.pID
                        //     );

                        //     toolTipHTML.setAttribute("data-this-round", i);
                        //     toolTipHTML.innerText = "H";
                        //     toolTipHTML.classList.add("hovertwin");
                        //     toolTipHTML.setAttribute("data-hover-id", condition.taID);
                        //     let toolTipText = document.createElement("span");
                        //     toolTipText.classList.add("tooltiptext");
                        //     toolTipText.innerHTML =
                        //         condition.description.toUpperCase() +
                        //         "<br><br>" +
                        //         participant.character_name +
                        //         (participant.numeric_value
                        //             ? " #" + participant.numeric_value
                        //             : "") +
                        //         " <span class='arrow-container'></span> " +
                        //         affecteesString;
                        //     toolTipHTML.appendChild(toolTipText);
                        //     turn.nextSibling.nextSibling.innerHTML +=
                        //         toolTipHTML.outerHTML;
                        // }

                    });

                    // if participant is affected by a condition, show icon with tooltip
                    participant.affectedArray.forEach((affected) => {
                        const affectedParticipant = ctApp.find(
                            (participant) => participant.pID === affected.pID
                        );
                        let endPosition = ctApp.findIndex((item) => {
                            return item.pID == affected.end_pID;
                        });
                        let causerPosition = ctApp.findIndex((item) => {
                            return item.pID == affected.pID;
                        });
                        let affectedPosition = ctApp.findIndex((item) => {
                            return item.pID == affected.affected_pID;
                        });

                        const affectedInit = affectedParticipant?.init;
                        if (
                            affected.concentration === 0
                                ? affected.pID !=
                                parseInt(affected.affected_pID)
                                : affected.concentration === 1 &&
                                // affected.pID !=
                                // parseInt(affected.affected_pID) &&
                                parseInt(affected.start_round) <= i &&
                                parseInt(affected.end_round) >= i
                        ) {
                            let starter = parseInt(affected.start_round);
                            let stopper = parseInt(affected.end_round);

                            if (starter < i && stopper > i) {
                                populateAffected();
                            } else if (
                                affectedPosition == endPosition &&
                                affectedPosition < causerPosition &&
                                starter == i
                            ) {
                            } else if (
                                endPosition <= affectedPosition &&
                                ((starter == i && stopper > i) ||
                                    (endPosition == affectedPosition &&
                                        stopper == i))
                            ) {
                                populateAffected();
                            } else if (
                                affectedPosition <= causerPosition &&
                                starter < i &&
                                stopper == i
                            ) {
                                populateAffected();
                            } else if (
                                causerPosition < affectedPosition &&
                                affectedPosition <= endPosition
                            ) {
                                if (starter == i && stopper == i) {
                                    populateAffected();
                                } else if (starter < i && stopper == i) {
                                    populateAffected();
                                } else if (starter == i && stopper > i) {
                                    populateAffected();
                                }
                            }

                            function populateAffected() {
                                const toolTipHTML =
                                    document.createElement("span");
                                // toolTipHTML.className = "tooltip affected";
                                toolTipHTML.classList.add("tooltip");
                                toolTipHTML.classList.add("affected");
                                toolTipHTML.setAttribute(
                                    "data-condition-id",
                                    affected.conditionID
                                );
                                toolTipHTML.setAttribute(
                                    "data-affected-id",
                                    affected.affected_pID
                                );
                                toolTipHTML.setAttribute("data-this-round", i);
                                toolTipHTML.innerHTML = "A";
                                toolTipHTML.classList.add("hovertwin")
                                toolTipHTML.setAttribute(
                                    "data-taid",
                                    affected.taID
                                );
                                toolTipHTML.setAttribute(
                                    "data-hover-id",
                                    affected.taID
                                );
                                let span5 = document.createElement("span");
                                span5.classList.add("tooltiptext");
                                span5.innerHTML =
                                    affected.description +
                                    "<br><br>" +
                                    ctApp.find((participant) => {
                                        return affected.pID == participant.pID;
                                    }).character_name +
                                    (ctApp.find((participant) => {
                                        return affected.pID == participant.pID;
                                    }).numeric_value
                                        ? " #" +
                                        ctApp.find((participant) => {
                                            return (
                                                affected.pID ==
                                                participant.pID
                                            );
                                        }).numeric_value
                                        : "") +
                                    " <span class='arrow-container'></span> " +
                                    participant.character_name +
                                    (participant.numeric_value
                                        ? " #" + participant.numeric_value
                                        : "");
                                toolTipHTML.appendChild(span5);
                                turn.nextSibling.nextSibling.appendChild(
                                    toolTipHTML
                                );
                            }
                        }
                    });

                    // show initiative value for this character
                    turn.nextSibling.nextSibling.nextSibling.innerText =
                        participant.init;
                });

                // does the row deserve a yellow or red highlight (e.g. 50% hp or 0 hp)
                participantHTML.forEach(async (turn, index) => {
                    let newValue = turn.nextSibling.innerText.split(",");
                    // if newValue contains comma, get what's to the right of the last comma
                    // const arr = previousHP.nextSibling.innerHTML.split(","); // split the string into an array based on comma delimiter
                    const lastNum = newValue.pop().trim(); // remove and return the last element of the array, and trim any whitespace
                    let x =
                        turn.nextSibling.nextSibling.querySelectorAll(
                            ".affected"
                        );
                    // compare that value to participant.starting_hp
                    if (lastNum <= participant.starting_hp / 2) {
                        turn.classList.add("yellow");
                        turn.nextSibling.classList.add("yellow");
                        turn.nextSibling.nextSibling.classList.add("yellow");
                        turn.nextSibling.nextSibling.nextSibling.classList.add(
                            "yellow"
                        );
                    }
                    if (lastNum <= 0) {
                        turn.classList.add("red");
                        turn.nextSibling.classList.add("red");
                        turn.nextSibling.nextSibling.classList.add("red");
                        x.forEach((y) => {
                            y.parentNode.removeChild(y);
                        });
                        turn.nextSibling.nextSibling.nextSibling.classList.add(
                            "red"
                        );
                    }
                });
            });
        }

        // load the actions into the wireframe
        try {
            for (const action of ctActions) {
                // alert(ctActions);
                let tool = {};
                if (action.toolID) {
                    tool = await dbQuery("GET", "tool/" + action.toolID);
                    tool = tool[0].toolName;
                } else {
                    tool = action.action;
                }
                let target = {};
                if (action.targetID) {
                    target = await dbQuery("GET", "target/" + action.targetID);
                }

                let targets,
                    targetString = "",
                    damageString = "";
                try {
                    targets = await dbQuery(
                        "GET",
                        "targets/" + target[0].targetID
                    );
                    targetString = "";
                    damageString = "";
                    targets.forEach((item, index) => {
                        targetString +=
                            (index > 0 ? " / " : "") +
                            item.character_name +
                            (item.numeric_value
                                ? " #" + item.numeric_value
                                : "");
                        damageString += (index > 0 ? " / " : "") + item.damage;
                    });
                } catch (err) { }

                let actionObject = {};
                actionObject.tool = tool || "";
                actionObject.hit =
                    action.hit == 1 ? "<b>✅</b>" : "";
                actionObject.targetName = targetString || "";
                actionObject.damage = damageString || "";
                actionObject.notes = action.notes || "";
                actionObject.end = action.end_note || "";
                actionObject.start = action.start_note || "";

                await sendToCoordinate(
                    action.round,
                    action.pID,
                    action.action_type || "",
                    actionObject,
                    action.taID || "0"
                );
            }
        } catch (err) { }

        // size the sections
        document.querySelector(".ct_round_container").innerHTML =
            mainContainer.innerHTML;
        resizeSections();

        // assign background colors to show selected line
        let startNav = document.querySelector(`[data-nav="${dataNav}"]`);
        try {
            startNav.classList.add("selected");
            startNav.nextSibling.classList.add("selected");
            startNav.nextSibling.nextSibling.classList.add("selected");
            startNav.nextSibling.nextSibling.nextSibling.classList.add(
                "selected"
            );
            navify();
        } catch (err) { }


        function sendToCoordinate(round, participant, actionType, actionObject, taID) {
            try {
                let y = mainContainer.querySelector(
                    `[data-round="${round}"] [data-section="2"] [div-participant="${participant}"]`
                );
                let y_drop = y;
                let y_start = y.nextSibling;
                let y_notes = y.nextSibling.nextSibling.nextSibling
                let y_end = y.nextSibling.nextSibling;

                if (
                    (actionObject.notes && actionObject.notes != "-")
                ) {
                    y_notes.innerHTML =
                        y.nextSibling.nextSibling.nextSibling.innerHTML +
                        (y.nextSibling.nextSibling.nextSibling.innerHTML == ""
                            ? ""
                            : " | ") + // taID != "0" ? `<span class='hovertwin' data-hover-id='${taID}'>` : "" +
                        actionObject.notes + // taID != "0" ? `</span>` : "" +
                        " ";
                }

                if (actionObject.start && actionObject.start != "-") {
                    y_start.innerHTML = actionObject.start;
                }

                if (actionObject.end && actionObject.end != "-") {
                    y_end.innerHTML = actionObject.end;
                }

                if (actionObject.drop && actionObject.drop != "-") {
                    y_drop.innerHTML = actionObject.drop;
                }
            } catch (err) { }

            let actionHTML = "data-" + actionType;
            let action = 1;
            let x;
            try {
                do {
                    x = mainContainer.querySelector(
                        `[data-round="${round}"] [${actionHTML}="${action}"] [data-participant="${participant}"]`
                    );
                    action += 1;
                } while (x.innerHTML !== "");
                if (taID != "0") {
                    x.classList.add("hovertwin");
                    x.setAttribute("data-hover-id", taID || "0")
                }
                x.innerHTML = actionObject.tool;
                x.nextSibling.innerHTML = actionObject.hit
                x.nextSibling.nextSibling.innerHTML = actionObject.targetName;
                x.nextSibling.nextSibling.nextSibling.innerHTML =
                    actionObject.damage;
            } catch (err) { }
        }

        let xyz = document.querySelectorAll(".ct_round");
        xyz[xyz.length - 1].classList.add("hidden");
        xyz[xyz.length - 1].classList.add("sometimes_hidden");
        xyz[xyz.length - 1].previousSibling.classList.add("hidden");
        xyz[xyz.length - 1].previousSibling.classList.add("sometimes_hidden");
        startNav.parentNode.parentNode.classList.remove("hidden");
        startNav.parentNode.parentNode.previousSibling.classList.remove(
            "hidden"
        );

        const cm = document.querySelector(".custom-cm");

        const contextMenuListener = function (e) {
            e.preventDefault();
            if (e.target.classList.contains("affected") || e.target.classList.contains("concentration")) {
                const scrollLeft =
                    window.pageXOffset || document.documentElement.scrollLeft;
                const scrollTop =
                    window.pageYOffset || document.documentElement.scrollTop;
                const menuHeight = cm.offsetHeight;
                const menuWidth = cm.offsetWidth;
                const clickY = e.clientY + scrollTop;
                const clickX = e.clientX + scrollLeft;
                const maxY = window.innerHeight + scrollTop;
                const maxX = window.innerWidth + scrollLeft;

                const top = clickY + menuHeight > maxY ? maxY - menuHeight : clickY;
                const left = clickX + menuWidth > maxX ? maxX - menuWidth : clickX;

                showContextMenu();
                cm.style.top = top + "px";
                cm.style.left = left + "px";

                // Rest of your code...

                let cmEnd = document.querySelector(".cmEnd");
                // alert(e.target.getAttribute("data-condition-id"))
                cmEnd.setAttribute(
                    "data-cm-condition-id",
                    e.target.getAttribute("data-condition-id")
                );
                cmEnd.setAttribute(
                    "data-cm-causer-id",
                    e.target.getAttribute("data-causerID")
                );
                cmEnd.setAttribute(
                    "data-cm-affected-id",
                    e.target.getAttribute("data-affected-id")
                );
                cmEnd.setAttribute(
                    "data-cm-taid",
                    e.target.getAttribute("data-taid")
                );
                cmEnd.setAttribute(
                    "data-cm-round",
                    e.target.getAttribute("data-this-round")
                );
                cmEnd.setAttribute(
                    "data-cm-concentration-or-affected",
                    e.target.classList.contains("affected")
                        ? "affected"
                        : "concentration"
                );
            }

        };

        function showContextMenu(show = true) {
            cm.style.display = show ? "block" : "none";
        }
        window.addEventListener("click", () => {
            showContextMenu(false);
        });
        document.addEventListener("contextmenu", contextMenuListener);

        // fill values for dropdown
        // fillDropdown(encounterCode);
        fillInitDropdown();
        fillDBDropdown();

        // Get all elements with the specified data-hover-id attribute
        const elements = document.querySelectorAll('[data-hover-id]');

        // Attach hover event listeners to each element
        elements.forEach(element => {
            element.addEventListener('mouseenter', handleMouseEnter);
            element.addEventListener('mouseleave', handleMouseLeave);
        });

        function handleMouseEnter(event) {
            // Get the data-hover-id attribute value of the current element
            const hoverId = event.target.getAttribute('data-hover-id');

            // Find all elements with the same data-hover-id attribute
            const twinElements = document.querySelectorAll(`[data-hover-id="${hoverId}"]`);

            // Apply the hover effect to all twin elements
            twinElements.forEach(twinElement => {
                twinElement.classList.add('hovered');
            });
        }

        function handleMouseLeave(event) {
            // Get the data-hover-id attribute value of the current element
            const hoverId = event.target.getAttribute('data-hover-id');

            // Find all elements with the same data-hover-id attribute
            const twinElements = document.querySelectorAll(`[data-hover-id="${hoverId}"]`);

            // Remove the hover effect from all twin elements
            twinElements.forEach(twinElement => {
                twinElement.classList.remove('hovered');
            });
        }





    }

    async function writeToDatabase(optionText) {
        const requestData = { option: optionText };

        try {
            const responseData = await dbQueryPost('your-server-endpoint', requestData);
            console.log('Data written to the file on the server:', responseData);
        } catch (error) {
            console.error('Failed to write data to the file:', error);
        }

        let html = document.querySelector(".selected");
        let dataNav = html.getAttribute("data-nav");
        load_encounter(0, dataNav);
    }

    async function restart_server() {
        const databaseOptions = document.getElementById('databaseOptions');
        const writeToDatabaseButton = document.getElementById('writeToDatabaseButton');
        const selectedOption = databaseOptions.options[databaseOptions.selectedIndex].text;
        writeToDatabase(selectedOption);
    };

    async function modalActions() {
        let modal = document.querySelector("#modal-body");
        let html = document.querySelector(".selected");
        let dataNavSelected = html.getAttribute("data-nav");
        let participantID = html.getAttribute("data-participant");
        let characterID = ctApp.find((participant) => {
            return participant.pID == participantID;
        }).chID;
        let currentRound = html.getAttribute("data-round");
        let encounter = ctApp[0].eID;

        // get participant's info
        // tools
        let participantTools = await dbQuery(
            "GET",
            "participantTools/" + characterID
        );
        // targets
        let allParticipants = ctApp.filter((participant) => {
            return participant// (
            //     participant.join_round <= currentRound &&
            //     (participant.dead_round >= currentRound ||
            //         participant.dead_round == "")
            // );
        });
        // conditions in effect (with option to end them)
        let conditionsInEffect = await dbQuery(
            "GET",
            "conditionsInEffect/" + encounter + "/" + currentRound
        );
        // build the HTML
        let container = document.createElement("div");
        container.classList.add("modal-body");

        let h3 = document.createElement("h3");
        let character = ctApp.find((participant) => {
            return participant.pID == participantID;
        });
        h3.innerHTML =
            character.character_name +
            (character.numeric_value ? " #" + character.numeric_value : "");
        container.appendChild(h3);

        let divModalTop = document.createElement("div");
        divModalTop.classList.add("flex_horizontal");

        let divLeft = document.createElement("div");
        divLeft.classList.add("flex-left");

        // load weapons/tools
        let div13 = document.createElement("div");
        let div1Title = document.createElement("h3");
        div1Title.classList.add("left");
        div1Title.innerHTML = "Weapons/Tools";
        div13.appendChild(div1Title);

        let div14 = document.createElement("div");
        let defaultTool = document.createElement("input");
        defaultTool.setAttribute("type", "radio");
        defaultTool.setAttribute("value", 0);
        defaultTool.setAttribute("id", "default");
        defaultTool.setAttribute("name", "weapons");
        defaultTool.classList.add("pointer");
        defaultTool.setAttribute("data-concentration", 0);
        defaultTool.setAttribute("checked", "true");
        let defaultLabel = document.createElement("label");
        defaultLabel.setAttribute("for", "default");
        defaultLabel.classList.add("radio_buttons");
        defaultLabel.innerHTML = "NONE";
        defaultLabel.classList.add("pointer");
        defaultLabel.setAttribute("default", "true");
        let br1 = document.createElement("br");
        div14.appendChild(defaultTool);
        div14.appendChild(defaultLabel);
        div14.appendChild(br1);

        participantTools.forEach((item) => {
            let tool = document.createElement("input");
            tool.setAttribute("type", "radio");
            tool.setAttribute("value", item.toolName);
            tool.setAttribute("id", item.toolID);
            tool.classList.add("pointer");
            tool.setAttribute("name", "weapons");
            tool.setAttribute("data-concentration", item.concentration);
            tool.setAttribute("data-holding", item.holding);
            tool.setAttribute("data-holding-one-round", item.holding_one_round);

            let label = document.createElement("label");
            label.setAttribute("for", item.toolID);
            label.classList.add("radio_buttons");
            label.classList.add("pointer");
            label.innerHTML =
                item.toolName +
                (item.damage_dice ? " (" + item.damage_dice + ")" : "");
            let span4;
            if (item.holding == 1) {
                span4 = document.createElement("span");
                span4.innerHTML = "H";
                span4.classList.add("holding");
                label.appendChild(span4);
            }
            let span1;
            if (item.concentration == "1") {
                span1 = document.createElement("span");
                span1.innerHTML = "C";
                span1.classList.add("concentration");
                label.appendChild(span1);
            }
            let br = document.createElement("br");
            div14.appendChild(tool);
            div14.appendChild(label);
            div14.appendChild(br);
        });

        divLeft.appendChild(div13);

        let weaponTextInput = document.createElement("input");
        weaponTextInput.setAttribute("type", "text");
        weaponTextInput.setAttribute("name", "weaponsText");
        weaponTextInput.setAttribute("autocomplete", "off");
        weaponTextInput.classList.add("text_field");
        let label1 = document.createElement("label");
        let br2 = document.createElement("br");

        div14.appendChild(weaponTextInput);
        div14.appendChild(label1);
        div14.appendChild(br2);
        divLeft.appendChild(div14);
        divModalTop.appendChild(divLeft);

        let divMiddleLeft = document.createElement("div");
        divMiddleLeft.classList.add("modal_column");
        let anotherDiv = document.createElement("div");
        let actionsArray = [
            "dash",
            "disarm",
            "disengage",
            "dodge",
            "escape",
            "grapple",
            "help",
            "hide",
            "improvise",
            "ready",
            "search",
            "shove",
            "use an object",
        ];
        actionsArray.forEach((action) => {
            let actionsRadio = document.createElement("input");
            actionsRadio.setAttribute("type", "radio");
            actionsRadio.setAttribute("value", action);
            actionsRadio.setAttribute("id", action);
            actionsRadio.classList.add("pointer");
            actionsRadio.setAttribute("name", "weapons");
            actionsRadio.setAttribute(
                "data-holding",
                action == "grapple" ||
                    action == "disarm" ||
                    action == "help" ||
                    action == "ready" ||
                    action == "shove"
                    ? 1
                    : 0
            );
            actionsRadio.setAttribute(
                "data-holding-one-round",
                action == "help" || action == "ready" ? 1 : 0
            );
            let label = document.createElement("label");
            label.setAttribute("for", action);
            label.classList.add("pointer");
            label.classList.add("radio_buttons");
            label.innerHTML = action;
            let span2;
            if (
                action == "grapple" ||
                action == "disarm" ||
                action == "help" ||
                action == "ready" ||
                action == "shove"
            ) {
                span2 = document.createElement("span");
                span2.innerHTML = "H";
                span2.classList.add("holding");
                label.appendChild(span2);
            }
            let br = document.createElement("br");
            anotherDiv.appendChild(actionsRadio);
            anotherDiv.appendChild(label);
            anotherDiv.appendChild(br);
        });

        divMiddleLeft.appendChild(anotherDiv);
        divModalTop.appendChild(divMiddleLeft);

        let divMiddleRight = document.createElement("div");
        divMiddleRight.classList.add("modal_column");
        let anotherDiv2 = document.createElement("div");
        anotherDiv2.classList.add("modal_column_int");
        let actions2 = ["action", "bonus", "reaction", "other"];

        actions2.forEach((action) => {
            let actionsRadio = document.createElement("input");
            actionsRadio.setAttribute("type", "radio");
            actionsRadio.setAttribute(
                "value",
                action == "reaction" ? "react" : action
            );
            if (action == "action") {
                actionsRadio.setAttribute("checked", "true");
            }
            actionsRadio.setAttribute(
                "id",
                action == "reaction" ? "react" : action
            );
            actionsRadio.setAttribute("name", "actions");
            actionsRadio.classList.add("pointer");
            let label = document.createElement("label");
            label.setAttribute("for", action == "reaction" ? "react" : action);
            label.classList.add("radio_buttons");
            label.classList.add("pointer");
            label.innerHTML = action;
            let br = document.createElement("br");
            anotherDiv2.appendChild(actionsRadio);
            anotherDiv2.appendChild(label);
            anotherDiv2.appendChild(br);
        });

        divMiddleRight.appendChild(anotherDiv2);
        divModalTop.appendChild(divMiddleRight);

        let divRight = document.createElement("div");
        divRight.classList.add("flex-right");

        let div15 = document.createElement("h3");
        div15.innerHTML = "Targets / Damage/HP";
        divRight.appendChild(div15);
        let div16 = document.createElement("div");
        div16.classList.add("conSaveParent");

        // populate the targets of the modal
        // first determine, by data-nav position, which targets to eliminate from list
        let redHTMLElements = document.querySelectorAll(".red.pointer");
        let redHTML = Array.from(redHTMLElements);
        let redAfterSelection = redHTML.filter((item) => {
            return parseInt(item.getAttribute("data-nav")) < parseInt(dataNavSelected) + ctApp.length
        })
        let redAfterSelectionParticipants = [];
        redAfterSelection.forEach((item) => {
            redAfterSelectionParticipants.push(parseInt(item.getAttribute("data-participant")))
        })
        allParticipants.forEach((participant) => {
            let target = document.createElement("input");
            target.setAttribute("type", "text");
            target.setAttribute("value", "");
            target.classList.add("text_field");
            target.classList.add("numeric");
            target.setAttribute("name", "participants");
            target.setAttribute("id", "p" + participant.pID);
            target.setAttribute("autocomplete", "off");
            let targetLabel = document.createElement("label");
            targetLabel.setAttribute("for", "p" + participant.pID);
            targetLabel.classList.add("p" + participant.pID);
            targetLabel.classList.add("modal_text_inputs");
            if (redAfterSelectionParticipants.includes(participant.pID)) {
                targetLabel.classList.add("downed-participants")
            }
            if (character.pc != participant.pc) {
                targetLabel.classList.add("bold-target")
            }
            targetLabel.classList.add("pointer");
            targetLabel.innerHTML =
                participant.character_name +
                (participant.numeric_value
                    ? " #" + participant.numeric_value
                    : "");

            let br3 = document.createElement("br");
            div16.appendChild(target);
            div16.appendChild(targetLabel);

            div16.appendChild(br3);

        });

        divRight.appendChild(div16);

        let notesLabel = document.createElement("h3");
        notesLabel.innerText = "Notes";
        let notes = document.createElement("textarea");
        notes.setAttribute("rows", "5");
        notes.setAttribute("cols", "30");
        notes.setAttribute("name", "notes");
        notes.classList.add("notes_text");

        let notesLabelStart = document.createElement("h3");
        notesLabelStart.innerText = "Start";
        let notesStart = document.createElement("textarea");
        notesStart.setAttribute("rows", "1");
        notesStart.setAttribute("cols", "30");
        notesStart.setAttribute("name", "notes_start");
        notesStart.classList.add("notes_text");

        let notesLabelEnd = document.createElement("h3");
        notesLabelEnd.innerText = "End";
        let notesEnd = document.createElement("textarea");
        notesEnd.setAttribute("rows", "1");
        notesEnd.setAttribute("cols", "30");
        notesEnd.setAttribute("name", "notes_end");
        notesEnd.classList.add("notes_text");

        divRight.appendChild(notesLabel);
        divRight.appendChild(notes);
        // divRight.appendChild(notesLabelStart);
        // divRight.appendChild(notesStart);
        // divRight.appendChild(notesLabelEnd);
        // divRight.appendChild(notesEnd);

        divModalTop.appendChild(divRight);
        container.appendChild(divModalTop);

        let divModalBottom = document.createElement("div");
        divModalBottom.classList.add("horizontal_bottom");
        let hr = document.createElement("hr");
        container.appendChild(hr);

        // TURN THIS BACK ON????
        // conditionsInEffect = conditionsInEffect.filter(
        //     (obj, index, self) =>
        //         index ===
        //         self.findIndex((t) => t.conditionID === obj.conditionID)
        // );
        qqq = conditionsInEffect;
        conditionsInEffect.forEach((condition) => {

            // if...
            // condition.end_round == currentRound &&
            // condition.end_pID !== participantID
            // alert("******")
            // alert(condition.end_round);
            // alert(currentRound);
            // alert(condition.end_pID);
            // alert(participantID);
            // alert(condition.pID);
            if (condition.end_round == currentRound && condition.end_pID == participantID) {

            } else {
                let conditionParticipant = condition.pID;
                let startHTML = document.querySelector(
                    '[data-round="' +
                    condition.start_round +
                    '"] [data-section="1"] [data-participant="' +
                    condition.pID +
                    '"]'
                );
                let start = startHTML.getAttribute("data-nav");

                let endHTML = document.querySelector(
                    '[data-round="' +
                    condition.end_round +
                    '"] [data-section="1"] [data-participant="' +
                    condition.end_pID +
                    '"]'
                );
                let end =
                    endHTML instanceof Element
                        ? endHTML.getAttribute("data-nav")
                        : "1000";

                if (
                    parseInt(dataNavSelected) >= parseInt(start) &&
                    parseInt(dataNavSelected) <= parseInt(end)
                ) {
                    let checkbox = document.createElement("input");
                    checkbox.setAttribute("type", "checkbox");
                    checkbox.setAttribute("name", "conditions");
                    checkbox.setAttribute(
                        "data-participant-affected",
                        condition.affected_pID
                    );
                    checkbox.setAttribute("data-cpid", condition.taID);
                    checkbox.classList.add("pointer");
                    checkbox.setAttribute("id", "b" + condition.affected_pID);
                    let span = document.createElement("span");
                    if (condition.concentration == 1) {
                        span.textContent = "C";
                        span.classList.add("concentration");
                        span.classList.add("savingThrow");
                    }
                    if (condition.holding == 1) {
                        span.textContent = "H";
                        span.classList.add("holding");
                        // span.classList.add("savingThrow");
                    }
                    let label = document.createElement("label");
                    label.setAttribute("for", "b" + condition.affected_pID);
                    label.classList.add("pointer");

                    let causer = ctApp.find((participant) => {
                        return condition.pID == participant.pID;
                    });
                    let causerName =
                        causer.character_name +
                        (causer.numeric_value != null
                            ? " #" + causer.numeric_value
                            : "");
                    if (
                        condition.pID == causer.pID &&
                        condition.concentration == 1
                    ) {
                        causerName =
                            "<span class='concentration'>" + causerName + "</span>";
                    }
                    let affected = ctApp.find((participant) => {
                        return parseInt(condition.affected_pID) == participant.pID;
                    }).character_name;
                    let numeric = ctApp.find((participant) => {
                        return parseInt(condition.affected_pID) == participant.pID;
                    }).numeric_value;

                    label.innerHTML =
                        condition.condition_name +
                        ": " +
                        causerName +
                        " => <b>" +
                        affected +
                        (numeric ? " #" + numeric : "") +
                        "</b> / " +
                        condition.description;
                    label.prepend(span);
                    let br6 = document.createElement("br");
                    divModalBottom.appendChild(checkbox);
                    divModalBottom.appendChild(label);
                    divModalBottom.appendChild(br6);
                    // if target is concentrating, put a yellow-highlighted C next to their name
                    if (
                        condition.concentration == 1 &&
                        !divRight.querySelector(
                            ".p" + condition.pID + " .concentration"
                        )
                    ) {
                        let concentrationSpan = document.createElement("span");
                        concentrationSpan.textContent = "C";
                        concentrationSpan.classList.add("concentration");
                        let html = divRight.querySelector(".p" + condition.pID);
                        html.innerHTML += concentrationSpan.outerHTML;
                    }
                }
            }


        });

        container.appendChild(divModalBottom);

        let buttonContainer = document.createElement("div");
        buttonContainer.classList.add("button_container");
        let submit = document.createElement("button");
        submit.innerText = "SUBMIT";
        submit.setAttribute("data-row", dataNavSelected)
        submit.setAttribute("data-selected-pid", participantID)
        submit.setAttribute("data-current-round", currentRound);
        submit.setAttribute("onclick", "submitAction()");
        submit.classList.add("button");
        submit.classList.add("modalSubmit");
        let submitGoToCondition = document.createElement("button");
        submitGoToCondition.innerText = "SUBMIT + go to CONDITIONS";
        submitGoToCondition.classList.add("button");
        submitGoToCondition.setAttribute("onclick", "submitAction('1')");

        buttonContainer.appendChild(submit);
        buttonContainer.appendChild(submitGoToCondition);
        container.appendChild(buttonContainer);

        modal.innerHTML = container.outerHTML;

        await document.removeEventListener("click", clickEventListener);
        document.addEventListener("click", clickEventListener);

        // Attach the event listener to the modal
        modal.addEventListener("click", modalClickListener);

        modal.addEventListener("input", function (e) {

            if (e.target.parentElement.classList.contains("conSaveParent")) {
                let concentrationStuff =
                    e.target.parentNode.querySelectorAll(".concentration");
                concentrationStuff.forEach((participant) => {
                    let z = participant.parentElement;
                    if (
                        participant.parentNode.previousSibling.value != "" &&
                        participant.parentNode.previousSibling.value != "0" &&
                        participant.parentNode.previousSibling.value != "00" &&
                        participant.parentNode.previousSibling.value != "000"
                    ) {
                        try {
                            let x = z.querySelector(".conSavingThrowCheck");
                            z.removeChild(x);
                        } catch (err) { }
                        let input =
                            participant.parentNode.previousSibling.value;
                        if (input / 2 <= 10) {
                            input = 10;
                        } else {
                            input = Math.floor(input / 2);
                        }
                        let span3 = document.createElement("span");
                        if (parseInt(input)) {
                            span3.classList.add("conSavingThrowCheck");
                            span3.innerHTML = `DC CON ${input}`;
                        }
                        participant.parentNode.appendChild(span3);
                    } else {
                        try {
                            let x = z.querySelector(".conSavingThrowCheck");
                            z.removeChild(x);
                        } catch (err) { }
                    }
                });
            }
        });
    }

    async function submitAction(forceCondition = 0) {

        const data = document.querySelector(".modalSubmit");
        const dataNav = data.getAttribute("data-row");
        const currentRound = data.getAttribute("data-current-round");
        const pID = data.getAttribute("data-selected-pid");

        let holdingOneRound = 0;
        // determine next available action number
        let nextAID = await dbQuery("GET", "getNewAID");
        if (nextAID.length > 0 && nextAID[0].aID != undefined) {
            nextAID = nextAID[0].aID + 1;
        } else {
            nextAID = 1;
        }

        // determine next available targetID
        let nextTargetID = await dbQuery("GET", "getNextTargetID");
        if (nextTargetID.length > 0 && nextTargetID[0].targetID != undefined) {
            nextTargetID = nextTargetID[0].targetID + 1;
        } else {
            nextTargetID = 1;
        }

        // get weapon radio buttons
        let weaponsText = document.getElementsByName("weaponsText");
        let concentrationNext = 0;
        let holding = 0;
        let weapons,
            tool = [],
            actionString = "",
            nextToolID = "";
        if (weaponsText[0].value == "") {
            weapons = document.getElementsByName("weapons");
            tool = Array.from(weapons).find((weapon) => {
                return weapon.checked == true;
            }).value;
            concentrationNext =
                Array.from(weapons)
                    .find((weapon) => {
                        return weapon.checked == true;
                    })
                    .getAttribute("data-concentration") || 0;
            holding =
                Array.from(weapons)
                    .find((weapon) => {
                        return weapon.checked == true;
                    })
                    .getAttribute("data-holding") || 0;
            holdingOneRound =
                Array.from(weapons)
                    .find((weapon) => {
                        return weapon.checked == true;
                    })
                    .getAttribute("data-holding-one-round") || 0;
            if (isNaN(parseInt(tool))) {
                actionString = tool;
                nextToolID = "0";
            } else if (tool == 0) {
                tool = "none";
                actionString = "none";
                nextToolID = "0";
            } else {
                actionString = "-";
                nextToolID = "0";
            }
        } else {
            tool = weaponsText[0].value;
            actionString = weaponsText[0].value;
            nextToolID = "0";
        }

        // determine hits and combine them into string, like "0/1" (for miss/hit)
        let targets = document.getElementsByName("participants");
        let targetHits = [];
        let target_pID = [];
        let damage = [];
        let targetHPsArray = [];
        let conditionName = actionString;
        let targetsArray = Array.from(targets);

        // wrap the forEach loop in a Promise.all
        await Promise.all(
            targetsArray.map(async (target, index) => {
                if (parseInt(target.value) && target.value != "0") {
                    targetHits.push("1 ");
                    target_pID.push(target.id.substring(1));
                    damage.push(target.value);
                    let x = await dbQuery(
                        "GET",
                        "targetsHP/" + target.id.substring(1)
                    );
                    if (x.length > 0 && x[0].new_hp != undefined) {
                        x = x[0].new_hp;
                    } else {
                        x = ctApp.find((participant) => {
                            return participant.pID == target.id.substring(1);
                        }).starting_hp;
                    }
                    targetHPsArray.push({ [`${index}`]: x });
                } else if (target.value == "0") {
                    targetHits.push("0 ");
                    target_pID.push(target.id.substring(1));
                    damage.push("0");
                    let x = await dbQuery(
                        "GET",
                        "targetsHP/" + target.id.substring(1)
                    );
                    if (x.length > 0 && x[0].new_hp != undefined) {
                        x = x[0].new_hp;
                    } else {
                        x = ctApp.find((participant) => {
                            return participant.pID == target.id.substring(1);
                        }).starting_hp;
                    }
                    targetHPsArray.push({ [`${index}`]: x });
                } else if (target.value == "x") {
                    targetHits.push("1 ");
                    target_pID.push(target.id.substring(1));
                    damage.push("0");
                    let x = await dbQuery(
                        "GET",
                        "targetsHP/" + target.id.substring(1)
                    );
                    if (x.length > 0 && x[0].new_hp != undefined) {
                        x = x[0].new_hp;
                    } else {
                        x = ctApp.find((participant) => {
                            return participant.pID == target.id.substring(1);
                        }).starting_hp;
                    }
                    targetHPsArray.push({ [`${index}`]: x });
                }
            })
        );
        let sortedTargetHPs = [];
        sortedTargetHPs = targetHPsArray
            .reduce((acc, obj) => {
                const key = parseInt(Object.keys(obj)[0]);
                const value = Object.values(obj)[0];
                acc.push({ key, value });
                return acc;
            }, [])
            .sort((a, b) => a.key - b.key)
            .map((obj) => obj.value);

        if (damage == "") {
            damage = "-";
        }
        if (target_pID == [""]) {
            target_pID = ["-"];
        }
        let target_pIDString = target_pID.join(",");

        if (target_pIDString == "") {
            target_pIDString = "-";
        }

        // get action type
        let actionTypeElement = document.getElementsByName("actions");
        let actionCategory = Array.from(actionTypeElement).find((item) => {
            return item.checked == true;
        }).value;
        if (actionCategory == "action") {
            actionCategory = "attack";
        }

        let notesElement = document.querySelector(".notes_text");
        let notes = notesElement.value || "-";
        notes = notes.replace("'", "&apos;").replace("#", "&num;");
        if (notes == "") {
            notes = "-";
        }

        let disableConditionsEle = document.getElementsByName("conditions");
        let disableConditionsString = "";
        let disabledConditionsArray = [];

        conditionsOff = [];
        conditionsToTurnOff = {};
        conditionsData = {};
        async function processConditions() {
            for (const condition of disableConditionsEle) {
                if (condition.checked) {
                    const object = {
                        affectedpID: condition.getAttribute("data-participant-affected"),
                        condition: condition.getAttribute("data-cpid")
                    }
                    conditionsOff.push(object);           // create arrays for each condition we want to edit
                    conditionsOff.forEach((obj) => {
                        if (!conditionsToTurnOff[obj.condition]) {
                            conditionsToTurnOff[obj.condition] = [];
                            conditionsToTurnOff[obj.condition].affectees = [];
                        }
                        conditionsToTurnOff[obj.condition].affectees.push(obj.affectedpID);
                        conditionsToTurnOff[obj.condition].affectees = [...new Set(conditionsToTurnOff[obj.condition].affectees)]
                    })

                    disableConditionsString += condition.value;

                    await dbQuery(
                        "GET",
                        "disableCondition/" +
                        condition.getAttribute("data-cpid") +
                        "/" +
                        currentRound +
                        "/" +
                        condition.getAttribute(
                            "data-participant-affected"
                        ) +
                        "/" +
                        pID
                    )
                }
            }


            ctApp.forEach((participant) => {
                Object.keys(conditionsToTurnOff).forEach(async (condition) => {

                    if (!conditionsToTurnOff[condition]["condition_name"]) {
                        conditionsToTurnOff[condition]["condition_name"] = getConditionNameById(condition);
                        const creator = await ctApp.filter((participant) => {
                            return participant.pID == getCreatorById(condition);
                        });
                        conditionsToTurnOff[condition]["creator"] = creator.length > 0 ? creator[0].character_name : null;
                        conditionsToTurnOff[condition]["creator_numeric"] = creator[0].numeric_value ? creator[0].numeric_value : null;
                    }


                    function getConditionNameById(idToFind) {
                        const conditionsArray = participant.conditionsArray;
                        for (const condition of conditionsArray) {
                            if (condition.conditionID == parseInt(idToFind)) {
                                return condition.description;
                            }
                        }
                        return null; // Return null if no match is found
                    }

                    function getCreatorById(idToFind) {
                        const conditionsArray = participant.conditionsArray;
                        for (const condition of conditionsArray) {
                            if (condition.conditionID == parseInt(idToFind)) {
                                return condition.pID;
                            }
                        }
                        return null; // Return null if no match is found
                    }

                })
            })



        }
        await processConditions();
        Object.keys(conditionsToTurnOff).forEach((condition) => {
            let string = conditionsToTurnOff[condition].creator + (conditionsToTurnOff[condition].creator_numeric ? " &num;" + conditionsToTurnOff[condition].creator_numeric : "") + "&apos;s " + conditionsToTurnOff[condition].condition_name + " ends for "
            conditionsToTurnOff[condition].affectees.forEach((affectee, index) => {
                let x = ctApp.find((participant) => {
                    return participant.pID == affectee
                })
                string += index < conditionsToTurnOff[condition].affectees.length ? " [" + x.character_name + (x.numeric_value ? " &num;" + x.numeric_value : "") + "]" : ""
            })
            if (notes == "-") {
                notes = string
            } else {
                notes += " | " + string
            }
        })
        disableConditionsString = disableConditionsString || "-";

        let hit = 0;
        if (
            targetHits.find((item) => {
                return item == 1;
            })?.length >= 1
        ) {
            hit = 1;
        }
        let dataAction = `submitAction/${ctApp[0].eID}/${currentRound}/${tool}/${actionString}/${pID}/${nextTargetID}/${hit}/${actionCategory}/${damage}/${notes}/${disableConditionsString}/${nextAID}/${nextToolID}/${target_pIDString}/${dataNav}`;
        // alert(dataAction);
        await dbQuery("GET", dataAction);
        let round = currentRound;
        targetHits.forEach(async (target, index) => {
            if (
                ctApp.findIndex((participant) => {
                    return participant.pID == pID;
                }) >
                ctApp.findIndex((target) => {
                    return target.pID == target_pID[index];
                })
            ) {
                round = parseInt(currentRound) + 1;
            } else {
                round = parseInt(currentRound);
            }

            const dataTarget = `submitTargets/${ctApp[0].eID
                }/${round}/${tool}/${actionString}/${pID}/${nextTargetID}/${targetHits[
                    index
                ].trim()}/${actionCategory}/${damage[index]
                }/${notes}/${disableConditionsString}/${nextAID}/${nextToolID}/${target_pID[index]
                }/${sortedTargetHPs[index]}`;
            await dbQuery("GET", dataTarget);
            if (sortedTargetHPs[index] - damage[index] <= 0) {
                await dbQuery(
                    "GET",
                    "terminate/" + target_pID[index] + "/" + round
                );
                await dbQuery(
                    "GET",
                    "endConditions/" + target_pID[index] + "/" + round
                );
            } else {
                await dbQuery(
                    "GET",
                    "revive/" + target_pID[index] + "/"
                )
            }
        });



        load_encounter(0, dataNav);
        let modal = document.querySelector(".modal");

        // Remove the event listener
        modal.removeEventListener("click", modalClickListener);
        modal.style.display = "none";
        if (concentrationNext == 1 || holding == 1 || forceCondition == 1) {
            launchConditionsModal(
                target_pID,
                concentrationNext,
                conditionName,
                holding,
                holdingOneRound,
                nextAID
            );
        }
    }

    async function modalConditions(
        affected,
        concentration,
        conditionName,
        holding,
        holdingOneRound,
        nextAID
    ) {
        let modal = document.querySelector("#modal-body");
        let html = document.querySelector(".selected");
        // let dataNavSelected = html.getAttribute("data-nav");
        let participantID = html.getAttribute("data-participant");
        // let causerObject = ctApp.find((participant) => {
        //     return participantID == participant.pID
        // })
        // let affecteeObject = ctApp.find((participant) => {
        //     return participant.pID ==
        // })
        let characterID = ctApp.find((participant) => {
            return participant.pID == participantID;
        }).chID;
        let currentRound = html.getAttribute("data-round");
        let encounter = ctApp[0].eID;

        // get participant's info
        // tools
        let participantTools = await dbQuery(
            "GET",
            "participantTools/" + characterID
        );
        // targets

        // conditions in effect (with option to end them)
        let conditionsInEffect = await dbQuery(
            "GET",
            "conditionsInEffect/" + encounter + "/" + currentRound
        );

        // build the HTML
        let container = document.createElement("div");
        container.classList.add("container");

        let topLeftDiv = document.createElement("div");
        topLeftDiv.classList.add("topLeftDiv");

        let h2 = document.createElement("h3");
        h2.innerHTML = "Condition Causer";
        topLeftDiv.appendChild(h2);

        // build the causers radio buttons
        let causerPosition;
        ctApp.forEach((participant, index) => {
            let checkbox = document.createElement("input");
            checkbox.setAttribute("type", "radio");
            checkbox.classList.add("pointer");
            checkbox.setAttribute("name", "causers");
            checkbox.setAttribute("id", participant.pID);
            if (participantID == participant.pID) {
                checkbox.setAttribute("checked", "true");
                causerPosition = index;
            }
            let label = document.createElement("label");
            label.classList.add("pointer");
            label.setAttribute("for", participant.pID);
            label.innerHTML =
                participant.character_name +
                (participant.numeric_value
                    ? " #" + participant.numeric_value
                    : "");
            let br = document.createElement("br");

            topLeftDiv.appendChild(checkbox);
            topLeftDiv.appendChild(label);
            topLeftDiv.appendChild(br);
        });

        let topMiddleDiv = document.createElement("div");
        topMiddleDiv.classList.add("topMiddleDiv");

        let h6 = document.createElement("h3");
        h6.innerHTML = "Condition Affectee(s)";
        topMiddleDiv.appendChild(h6);
        // build the affectees checkboxes
        let affecteePosition;
        let affecteesCount = 0;
        ctApp.forEach((participant, index) => {
            let checkbox = document.createElement("input");
            checkbox.classList.add("pointer");
            checkbox.setAttribute("type", "checkbox");
            checkbox.setAttribute("name", "affectees");
            checkbox.setAttribute("id", "a" + participant.pID);
            if (affected.includes(participant.pID.toString())) {
                checkbox.setAttribute("checked", "true");
                affecteePosition = index;
                affecteesCount += 1;
            }
            let label = document.createElement("label");
            label.classList.add("pointer");
            label.setAttribute("for", "a" + participant.pID);
            label.innerHTML =
                participant.character_name +
                (participant.numeric_value
                    ? " #" + participant.numeric_value
                    : "");
            let br = document.createElement("br");

            topMiddleDiv.appendChild(checkbox);
            topMiddleDiv.appendChild(label);
            topMiddleDiv.appendChild(br);
        });

        let topRightDiv = document.createElement("div");
        topRightDiv.classList.add("topRightDiv");

        let h3 = document.createElement("h3");
        h3.innerHTML = "Whose Round It Ends On:";
        topRightDiv.appendChild(h3);

        // build the radio buttons for whose turn a condition ends on
        ctApp.forEach((participant) => {
            let checkbox = document.createElement("input");
            checkbox.setAttribute("type", "radio");
            checkbox.classList.add("pointer");
            checkbox.setAttribute("name", "condition_ends");
            checkbox.setAttribute("id", "x" + participant.pID);
            if (
                affected.includes(participant.pID.toString()) &&
                holding == 1 &&
                affecteesCount == 1
            ) {
                checkbox.setAttribute("checked", "true");
            } else {
                if (participantID == participant.pID) {
                    checkbox.setAttribute("checked", "true");
                }
            }

            let label = document.createElement("label");
            label.classList.add("pointer");
            label.setAttribute("for", "x" + participant.pID);
            label.innerHTML =
                participant.character_name +
                (participant.numeric_value
                    ? " #" + participant.numeric_value
                    : "");
            let br = document.createElement("br");

            topRightDiv.appendChild(checkbox);
            topRightDiv.appendChild(label);
            topRightDiv.appendChild(br);
        });

        container.appendChild(topLeftDiv);
        container.appendChild(topMiddleDiv);
        container.appendChild(topRightDiv);

        let div17 = document.createElement("div");
        div17.classList.add("topLeftDiv");

        let textHeader = document.createElement("h3");
        textHeader.innerHTML = "Describe the Condition";
        let textInput = document.createElement("input");
        textInput.setAttribute("type", "text");
        textInput.classList.add("conditionsText");
        textInput.setAttribute("value", conditionName || "");
        textInput.setAttribute("name", "conditionsText");
        textInput.classList.add("text_field");
        let br7 = document.createElement("br");
        div17.appendChild(textHeader);
        div17.appendChild(textInput);
        div17.appendChild(br7);

        let h7 = document.createElement("h3");
        h7.innerHTML = "Concentration Begins?";
        // let br8 = document.createElement("br");
        let radioButton1 = document.createElement("input");
        radioButton1.setAttribute("type", "radio");
        radioButton1.setAttribute("name", "concentration");
        radioButton1.setAttribute("id", "concentration_yes");
        radioButton1.classList.add("pointer");
        radioButton1.setAttribute("value", 1);
        if (concentration == 1) {
            radioButton1.setAttribute("checked", "true");
        }
        let label2 = document.createElement("label");
        label2.setAttribute("for", "concentration_yes");
        label2.classList.add("pointer");
        label2.innerText = "YES";
        let radioButton2 = document.createElement("input");
        radioButton2.setAttribute("type", "radio");
        radioButton2.setAttribute("name", "concentration");
        radioButton2.setAttribute("id", "concentration_no");
        radioButton2.classList.add("pointer");
        radioButton2.setAttribute("value", 0);
        if (radioButton1.checked == false) {
            radioButton2.setAttribute("checked", "true");
        }
        let label3 = document.createElement("label");
        label3.setAttribute("for", "concentration_no");
        label3.classList.add("pointer");
        label3.innerText = "NO";
        let br9 = document.createElement("br");

        div17.appendChild(h7);
        // div17.appendChild(br8);
        div17.appendChild(radioButton1);
        div17.appendChild(label2);
        div17.appendChild(radioButton2);
        div17.appendChild(label3);
        div17.appendChild(br9);

        let h9 = document.createElement("h3");
        h9.innerHTML = "Holding Begins?";
        // let br10 = document.createElement("br");
        let radioButton3 = document.createElement("input");
        radioButton3.setAttribute("type", "radio");
        radioButton3.setAttribute("name", "holding");
        radioButton3.setAttribute("id", "holding_yes");
        radioButton3.classList.add("pointer");
        radioButton3.setAttribute("value", 1);
        if (holding == 1) {
            radioButton3.setAttribute("checked", "true");
        }
        let label4 = document.createElement("label");
        label4.setAttribute("for", "holding_yes");
        label4.classList.add("pointer");
        label4.innerText = "YES";
        let radioButton4 = document.createElement("input");
        radioButton4.setAttribute("type", "radio");
        radioButton4.setAttribute("name", "holding");
        radioButton4.setAttribute("id", "holding_no");
        radioButton4.classList.add("pointer");
        radioButton4.setAttribute("value", 0);
        if (radioButton3.checked == false) {
            radioButton4.setAttribute("checked", "true");
        }
        let label5 = document.createElement("label");
        label5.setAttribute("for", "holding_no");
        label5.classList.add("pointer");
        label5.innerText = "NO";
        let br11 = document.createElement("br");

        div17.appendChild(h9);
        // div17.appendChild(br10);
        div17.appendChild(radioButton3);
        div17.appendChild(label4);
        div17.appendChild(radioButton4);
        div17.appendChild(label5);
        div17.appendChild(br11);

        let buttonContainer = document.createElement("div");
        buttonContainer.classList.add("button_container");
        let submit = document.createElement("button");
        submit.classList.add("pointer");
        submit.innerText = "SUBMIT";
        submit.setAttribute("onclick", `submitCondition(${nextAID})`);

        container.appendChild(div17);

        let bottomMiddleDiv = document.createElement("div");
        bottomMiddleDiv.classList.add("topRightDiv");

        let h4 = document.createElement("h3");
        h4.innerHTML = "Beginning Round";
        let beginRound = document.createElement("select");
        beginRound.classList.add("beginRound");
        beginRound.classList.add("pointer");
        beginRound.setAttribute("name", "beginRound");
        for (let i = 1; i <= 50; i++) {
            let option = document.createElement("option");
            option.setAttribute("value", i);
            option.classList.add("pointer");
            option.innerHTML = i;
            if (currentRound == i) {
                option.setAttribute("selected", "true");
            }

            if (currentRound == i && holding == 0) {
                option.setAttribute("selected", "true");
            } else {
                if (currentRound == i && causerPosition <= affecteePosition) {
                    option.setAttribute("selected", "true");
                }
            }

            beginRound.appendChild(option);
        }

        bottomMiddleDiv.appendChild(h4);
        bottomMiddleDiv.appendChild(beginRound);

        let h5 = document.createElement("h3");
        h5.innerHTML = "Ending Round";
        let endRound = document.createElement("select");
        endRound.classList.add("endRound");
        endRound.classList.add("pointer");
        endRound.setAttribute("name", "endRound");

        // determine whose init is higher, causer or affectee

        for (let i = 1; i <= 20; i++) {
            let option = document.createElement("option");
            option.setAttribute("value", i);
            option.classList.add("pointer");
            option.innerHTML = i;
            if (currentRound == i - 10 && holdingOneRound == 0) {
                option.setAttribute("selected", "true");
            } else {
                if (currentRound == i && causerPosition < affecteePosition) {
                    option.setAttribute("selected", "true");
                } else if (
                    currentRound == i - 1 &&
                    causerPosition >= affecteePosition
                ) {
                    option.setAttribute("selected", "true");
                }
            }
            endRound.appendChild(option);
        }

        bottomMiddleDiv.appendChild(h5);
        bottomMiddleDiv.appendChild(endRound);

        let bottomRightDiv = document.createElement("div");
        let h8 = document.createElement("h3");
        h8.innerHTML = "Submit";

        bottomRightDiv.appendChild(h8);
        bottomRightDiv.appendChild(submit);

        container.appendChild(bottomMiddleDiv);
        container.appendChild(bottomRightDiv);
        container.appendChild(buttonContainer);
        // container.appendChild(submit);

        modal.innerHTML = container.outerHTML;
    }

    async function submitCondition(nextAID) {
        let html = document.querySelector(".selected");
        let currentRound = html.getAttribute("data-round");
        let pID = html.getAttribute("data-participant");
        let dataNav = html.getAttribute("data-nav");
        let causerHTML = document.getElementsByName("causers");
        let affecteesHTML = document.getElementsByName("affectees");
        let conditionEndsHTML = document.getElementsByName("condition_ends");
        let conditionDescription =
            document.querySelector(".conditionsText").value;
        conditionDescription = conditionDescription
            .replace("'", "&apos;")
            .replace("#", "&num;")
            .replace("/", "&sol;");
        let startRoundHTML = document.querySelector(".beginRound");
        let endRoundHTML = document.querySelector(".endRound");
        let concentrationHTML = document.getElementsByName("concentration");
        let holdingHTML = document.getElementsByName("holding");

        let causerPID;
        causerPID = Array.from(causerHTML).find((causer) => {
            return causer.checked == true;
        }).id;
        let concentration;
        concentration = Array.from(concentrationHTML).find(
            (concentrationValue) => {
                return concentrationValue.checked == true;
            }
        ).value;

        let holding;
        holding = Array.from(holdingHTML).find(
            (holdingValue) => {
                return holdingValue.checked == true;
            }
        ).value;

        let affecteesHTMLArray = [];
        affecteesHTMLArray = Array.from(affecteesHTML).filter((affected) => {
            return affected.checked == true;
        });
        let affecteesPID = [];
        affecteesHTMLArray.forEach((affectee) => {
            affecteesPID.push(affectee.getAttribute("id").substring(1));
        });
        let affecteesString = affecteesPID.join(", ");
        let end_pID = Array.from(conditionEndsHTML).find((participant) => {
            return participant.checked == true;
        }).id;
        end_pID = end_pID.substring(1);

        let conditionEndsPID = Array.from(conditionEndsHTML)
            .find(item => item.checked)
            .id.slice(1);
        let startRound = Array.from(startRoundHTML).find(item => item.selected).value;
        let endRound = Array.from(endRoundHTML).find(item => item.selected).value;

        // get next cpID
        let latestConditionID = await dbQuery("GET", "getNextcpID/");
        let newCpID = parseInt(latestConditionID[0]?.cpID || 0) + 1;

        // send info to tbl_condition_pool
        let dataPool = `newConditionPoolItem/${conditionDescription.substring(
            0,
            15
        )}/${conditionDescription}`;
        await dbQuery("GET", dataPool);

        // determine next available taID in ct_tbl_condition_affectee
        let getNextTAID = await dbQuery("GET", "getNextTAID");
        let taID = getNextTAID.taID + 1;

        // send condition affectee info
        let dataConditionsAffectees = `addConditionAffectees/${taID}/${startRound}/${endRound}/${affecteesString}/${end_pID}`;

        await dbQuery("GET", dataConditionsAffectees);

        // send condition info
        let dataConditions = `addCondition/${ctApp[0].eID}/${causerPID}/${taID}/${conditionEndsPID}/${newCpID}/${concentration}/${holding}/${nextAID}`;
        await dbQuery("GET", dataConditions);

        load_encounter(0, dataNav);
        let modal = document.querySelector(".modal");
        modal.style.display = "none";
    }

    async function modalInit() {
        const modal = document.querySelector("#modal-body");
        const dropdown = document.querySelector(".initDropdown");
        const selectedOptionValue = dropdown.options[dropdown.selectedIndex].value;

        const container = document.createElement("div");
        container.classList.add("modal-body");
        let div = document.createElement("div");
        div.classList.add("modal-content");
        let h1 = document.createElement("h1");
        h1.classList.add("center");
        h1.innerText = "INITIATIVE";
        div.appendChild(h1);

        if (selectedOptionValue == "Party") {
            // get the character_names and their pID
            let partyParticipants = ctApp.filter((participant) => {
                return participant.pc == 1
            })

            // write the HTML that fits

            const h2 = document.createElement("h2");
            h2.classList.add("center");
            h2.innerText = "Our Heroes!"
            div.appendChild(h2);
            const div4 = document.createElement("div");
            div4.classList.add("center-div-align-left");

            partyParticipants.forEach((participant, index) => {
                const div2 = document.createElement("div");
                div2.classList.add("line");
                const input = document.createElement("input");
                input.classList.add("initValues")
                input.setAttribute("type", "text");
                input.setAttribute("maxLength", "2");
                input.setAttribute("data-init-pid", participant.pID);

                const input2 = document.createElement("input");
                input2.classList.add("secondaryInitValues")
                input2.classList.add("secondaryInitOff")
                input2.setAttribute("type", "text");
                input2.setAttribute("maxLength", "2");
                input2.setAttribute("data-init-pid-secondary", participant.pID);

                const span = document.createElement("span");
                span.innerText = participant.character_name;
                div2.appendChild(input);
                div2.appendChild(input2);
                div2.appendChild(span);
                div4.appendChild(div2);
            })
            div.appendChild(div4)
            container.appendChild(div);

            const br = document.createElement("br");
            container.appendChild(br);
            const br2 = document.createElement("br");

            const button = document.createElement("button");
            button.setAttribute("onclick", "submitInitModal(1)")
            button.innerText = "SUBMIT";
            button.classList.add("center")

            const button2 = document.createElement("button");
            button2.setAttribute("onclick", "closeModalBox()")
            button2.innerText = "CLOSE";
            button2.classList.add("close-modal")
            button2.classList.add("center");

            let div3 = document.createElement("div");
            div3.classList.add("center")

            div3.appendChild(button)
            div3.appendChild(button2)
            container.appendChild(div3);
            container.appendChild(br2);

            modal.innerHTML = container.outerHTML;
            setTimeout(() => {
                let cursorField = document.querySelector('input[data-init-pid]')
                cursorField.focus();
            }, 90)

            modal.addEventListener("input", function (e) {
                // Get all left input elements
                const leftInputs = document.querySelectorAll('[data-init-pid]');

                // Create a Set to store encountered values
                const encounteredValues = new Set();
                const duplicatedNumbers = new Set();

                // Iterate through each left input element
                leftInputs.forEach(leftInput => {
                    // Get the value of the left input
                    const leftInputValue = leftInput.value.trim();

                    // Check if the value is not empty
                    if (leftInputValue !== '') {
                        // Check if the value has been encountered before
                        if (encounteredValues.has(leftInputValue)) {
                            // If yes, add it to the Set of duplicated numbers
                            duplicatedNumbers.add(leftInputValue);
                        } else {
                            // If not, add it to the Set of encountered values
                            encounteredValues.add(leftInputValue);
                        }
                    }
                });

                // Log the array of duplicated numbers to the console
                console.log('Duplicated Numbers:', Array.from(duplicatedNumbers));

                // Iterate through each left input element
                leftInputs.forEach(leftInput => {
                    // Get the value of the left input
                    const leftInputValue = leftInput.value.trim();

                    // Check if the value is in the duplicatedNumbers array
                    if (duplicatedNumbers.has(leftInputValue)) {
                        // Get the value of data-init-pid for the matching left input
                        const dataInitPidValue = leftInput.getAttribute('data-init-pid');

                        // Select all elements with data-init-pid-secondary matching the value
                        const secondaryInitOffElements = document.querySelectorAll(`[data-init-pid-secondary="${dataInitPidValue}"]`);

                        // Remove the secondaryInitOff class from matching elements
                        secondaryInitOffElements.forEach(element => {
                            element.classList.remove('secondaryInitOff');
                        });
                    }
                });

                // Iterate through each left input element
                leftInputs.forEach(leftInput => {
                    // Get the value of the left input
                    const leftInputValue = leftInput.value.trim();

                    // Check if the value is NOT in the duplicatedNumbers array
                    if (!duplicatedNumbers.has(leftInputValue)) {
                        // Get the value of data-init-pid for the matching left input
                        const dataInitPidValue = leftInput.getAttribute('data-init-pid');

                        // Select all elements with data-init-pid-secondary matching the value
                        const secondaryInitOffElements = document.querySelectorAll(`[data-init-pid-secondary="${dataInitPidValue}"]`);

                        // Add the secondaryInitOff class to matching elements
                        secondaryInitOffElements.forEach(element => {
                            element.classList.add('secondaryInitOff');
                        });
                    }
                });
            });

        } else {
            // determine which participants in ctApp have character_name that matches selectedOptionValue
            const creatureParticipants = ctApp.filter((participant) => {
                return participant.character_name == selectedOptionValue
            })
            // get their init_modifiers
            const initModifier = creatureParticipants[0].init_modifier

            // write the HTML that fits
            const h2 = document.createElement("h2");
            h2.classList.add("center");
            h2.innerText = (
                creatureParticipants.length > 1
                    ? creatureParticipants.length
                    : ""
            )
                + " "
                + creatureParticipants[0].character_name + "(s)"
            div.appendChild(h2);

            const divOpponents = document.createElement("div");
            divOpponents.classList.add("center-div-align-left");

            creatureParticipants.forEach((creature, index) => {
                let div2 = document.createElement("div");
                div2.classList.add("line")
                let input = document.createElement("input");
                input.setAttribute("type", "text");
                input.setAttribute("data-init-modifier", creature.init_modifier || 0);
                // input.setAttribute("value", creature.pID);
                input.setAttribute("maxLength", "2");
                let span = document.createElement("span");
                span.innerText = (creature.init_modifier >= 0 ? " + " : " - ") + Math.abs(creature.init_modifier) + " = ";
                let strong = document.createElement("strong");
                strong.setAttribute("data-init-pid", creature.pID);
                strong.innerText = "0";

                div2.appendChild(input);
                div2.appendChild(span);
                div2.appendChild(strong);
                divOpponents.appendChild(div2);
            })
            div.appendChild(divOpponents);
            container.appendChild(div);

            let br = document.createElement("br");
            container.appendChild(br);
            let br2 = document.createElement("br");

            let button = document.createElement("button");
            button.setAttribute("onclick", "submitInitModal(0)")
            button.innerText = "SUBMIT";
            button.classList.add("center")

            let button2 = document.createElement("button");
            button2.setAttribute("onclick", "closeModalBox()")
            button2.classList.add("close-modal")
            button2.innerText = "CLOSE";
            button2.classList.add("center");

            let div3 = document.createElement("div");
            div3.classList.add("center")

            div3.appendChild(button)
            div3.appendChild(button2)
            container.appendChild(div3);
            container.appendChild(br2);

            modal.innerHTML = container.outerHTML;

            modal.innerHTML = container.outerHTML;
            setTimeout(() => {
                let cursorField = document.querySelector('input[data-init-modifier]')
                cursorField.focus();
            }, 90)

            modal.addEventListener("input", function (e) {

                const inputElement = e.target;
                const parentDiv = inputElement.parentElement;
                let strongElement = parentDiv.querySelector('strong');
                const inputValue = inputElement.value.trim(); // Trim leading/trailing white spaces
                if (inputValue === "") {
                    strongElement.innerText = "0";
                } else {
                    let parsedValue = parseInt(inputValue, 10);
                    let initModifier = parseInt(inputElement.getAttribute('data-init-modifier'), 10);
                    let newValue = parsedValue + initModifier;
                    strongElement.innerText = newValue;
                }
                const allInputs = e.target.parentElement;
            });
        }
        const cm = document.querySelector(".modal-content");
        function showContextMenu(show = true) {
            cm.style.display = show ? "block" : "none";
        }

    }

    async function submitInitModal(PC) {

        if (PC == 0) {
            // Assuming you have a NodeList, for example:
            let nodeList = document.querySelectorAll('input[type="text"] + span + strong');

            let strongValuesArray = Array.from(nodeList).map(function (element) {
                return element.innerText;
            });
            // Now strongValuesArray contains the innerText values of the <strong> elements

            const initialOrderPids = Array.from(nodeList).map(function (element) {
                return element.getAttribute('data-init-pid')
            })

            // sort strongValuesArray in descending order
            let sortedValues = strongValuesArray.slice().sort((a, b) => b - a);
            let indexMapping = strongValuesArray.map((_, index) => index)
                .sort((a, b) => strongValuesArray[b] - strongValuesArray[a]);

            const newOrderPids = indexMapping.map(index => initialOrderPids[index]);
            const reorderedNumericValues = Array.from({ length: sortedValues.length }, (_, index) => index + 1);

            let stringToSend = ""
            initialOrderPids.forEach((creature, index) => {
                stringToSend += (index > 0 ? " | " : "") + newOrderPids[index] + ", " + reorderedNumericValues[index] + ", " + sortedValues[index]
            })

            let postData = initialOrderPids.map((creature, index) => ({
                pID: newOrderPids[index],
                numeric_value: "", // Set this to the appropriate value or an empty string
                init: sortedValues[index],
            }));

            await dbQueryPost("orderInitiative", postData)
                .then((data) => {
                    console.log(data); // Handle the response from the server
                })
                .catch((error) => {
                    // Handle errors here
                });


            // await dbQuery("GET", `orderInitiative/${stringToSend}`)

            // where pID = newOrderPids[x], set numeric_value = reorderedNumericValues[x] and init = sortedValues[x]
        } else {
            // Assuming you have a NodeList, for example:
            let nodeList = document.querySelectorAll('.initValues');
            let secondaryNodeList = document.querySelectorAll(".secondaryInitValues:not(.secondaryInitOff)");
            xxx = secondaryNodeList;
            // let nodeList = document.querySelectorAll('input[type="text"]');

            let strongValuesArray = Array.from(nodeList).map(function (element) {
                return element.value;
            });
            // Now strongValuesArray contains the innerText values of the <strong> elements

            const initialOrderPids = Array.from(nodeList).map(function (element) {
                return element.getAttribute('data-init-pid')
            })

            // sort strongValuesArray in descending order
            let sortedValues = strongValuesArray.slice().sort((a, b) => b - a);
            let indexMapping = strongValuesArray.map((_, index) => index)
                .sort((a, b) => strongValuesArray[b] - strongValuesArray[a]);

            const newOrderPids = indexMapping.map(index => initialOrderPids[index]);

            let stringToSend = ""
            initialOrderPids.forEach((creature, index) => {
                stringToSend += (index > 0 ? " | " : "") + newOrderPids[index] + ", " + "0" + ", " + sortedValues[index]
            })

            let postData = initialOrderPids.map((creature, index) => ({
                pID: newOrderPids[index],
                numeric_value: "", // Set this to the appropriate value or an empty string
                init: sortedValues[index],
            }));

            await dbQueryPost("orderInitiative", postData)
                .then((data) => {
                    console.log(data); // Handle the response from the server
                })
                .catch((error) => {
                    // Handle errors here
                });

        }

        let html = document.querySelector(".selected");
        let dataNav = html.getAttribute("data-nav");
        load_encounter(0, dataNav);
    }

    async function dbQuery(httpReqType, httpReqString) {
        // arguments should look something like "GET" and "getSomethingFromBackEnd/42/true"
        let dbReturn = makePromise(httpReqType, httpReqString);
        let dbReturnJSON = await dbReturn;
        let unpackdbReturn = JSON.parse(dbReturnJSON);
        return unpackdbReturn;

        function makePromise(httpReqType, httpReqString) {
            return new Promise((resolve, reject) => {
                const xhr = new XMLHttpRequest();
                xhr.open(httpReqType, `../${httpReqString}`, true);
                xhr.onload = () => resolve(xhr.responseText);
                xhr.onerror = () => resolve("Request Failed");
                xhr.send();
            });
        }
    }

    async function dbQueryPost(httpReqString, requestData) {
        try {
            const response = await fetch(`../${httpReqString}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestData),
            });

            if (response.ok) {
                const responseData = await response.json();
                return responseData;
            } else {
                throw new Error('Request Failed');
            }
        } catch (error) {
            console.error('Error:', error);
            throw error; // Rethrow the error for handling in the caller
        }
    }


    function findLargestSubarray(arr) {
        let largestSubarray = arr[0];
        let largestLength = arr[0]?.length;
        for (let i = 1; i < arr?.length; i++) {
            if (arr[i].length > largestLength) {
                largestSubarray = arr[i];
                largestLength = arr[i].length;
            }
        }
        return largestLength;
    }

    function buildASection(
        actionType,
        ctRound,
        numberActions,
        ctApp
    ) {
        let round = ctRound;
        for (let j = 1; j <= numberActions; j++) {
            let section2 = document.createElement("div");

            section2.classList.add("ct_grid4columns");
            section2.setAttribute("data-" + actionType, j);

            let div5 = document.createElement("div");
            div5.classList.add("section");
            div5.classList.add("header");
            div5.classList.add(actionType + (actionType == "attack" && j % 2 == 0 ? "_alt" : ""));
            div5.classList.add("center");
            div5.textContent =
                actionType.charAt(0).toUpperCase() +
                actionType.substring(1) +
                (numberActions > 1 ? " #" + j : "");
            let div6 = document.createElement("div");
            div6.classList.add("section");
            div6.classList.add("header");
            div6.classList.add(actionType + (actionType == "attack" && j % 2 == 0 ? "_alt" : ""));
            div6.classList.add("center");
            div6.textContent = "Hit?";
            let div7 = document.createElement("div");
            div7.classList.add("section");
            div7.classList.add("header");
            div7.classList.add(actionType + (actionType == "attack" && j % 2 == 0 ? "_alt" : ""));
            div7.classList.add("center");
            div7.textContent = "Target(s)";
            let div8 = document.createElement("div");
            div8.classList.add("section");
            div8.classList.add("header");
            div8.classList.add(actionType + (actionType == "attack" && j % 2 == 0 ? "_alt" : ""));
            div8.classList.add("center");
            div8.textContent = "hp";
            section2.appendChild(div5);
            section2.appendChild(div6);
            section2.appendChild(div7);
            section2.appendChild(div8);
            ctApp.forEach((participant) => {
                let div9 = document.createElement("div");
                div9.classList.add("section");
                div9.classList.add(actionType + (actionType == "attack" && j % 2 == 0 ? "_alt" : ""));
                div9.classList.add("center");
                div9.setAttribute("data-participant", participant.pID);
                let div10 = document.createElement("div");
                div10.classList.add("section");
                div10.classList.add(actionType + (actionType === "attack" && j % 2 === 0 ? "_alt" : ""));
                div10.classList.add("center");
                let div11 = document.createElement("div");
                div11.classList.add("section");
                div11.classList.add(actionType + (actionType === "attack" && j % 2 === 0 ? "_alt" : ""));
                div11.classList.add("center");
                let div12 = document.createElement("div");
                div12.classList.add("section");
                div12.classList.add(actionType + (actionType === "attack" && j % 2 === 0 ? "_alt" : ""));
                div12.classList.add("center");
                section2.appendChild(div9);
                section2.appendChild(div10);
                section2.appendChild(div11);
                section2.appendChild(div12);
                round.appendChild(section2);
            });
        }
        return round;
    }

    async function fillDBDropdown() {
        let dbList = await dbQuery("GET", "available-databases")
        let select = document.querySelector(".dbDropdown");
        select.innerHTML = "";

        dbList.databases.forEach((db) => {
            const option = document.createElement("option");
            option.setAttribute("value", db);
            option.innerText = db;
            if (dbList.database_current === db) {
                option.setAttribute("selected", "selected")
            }
            select.appendChild(option);
        })


    }

    async function fillInitDropdown() {
        // get an array of unique participant names where pc = 0
        let names = [];
        ctApp.forEach((participant) => {
            if (participant.pc === 0) {
                names.push(participant.character_name)
            }
        })
        let uniqueCombatantNames = [...new Set(names)]


        let select = document.querySelector(".initDropdown");
        select.innerHTML = "";
        // let container = document.createElement("div");
        let option = document.createElement("option");
        option.setAttribute("value", "Party");
        option.setAttribute("selected", "selected");
        option.innerText = "Party"
        select.appendChild(option);

        uniqueCombatantNames.forEach((combatant, index) => {
            let option2 = document.createElement("option")
            option2.setAttribute("value", combatant);
            option2.innerText = combatant;
            select.appendChild(option2);
        });
        div.appendChild(select);
        select.appendChild(div);

    }

    function init_modal() {
        let initDropdown = document.querySelector(".initDropdown")
        let selectedOptionText;
        for (let i = 0; i < initDropdown.options.length; i++) {
            if (initDropdown.options[i].selected) {
                selectedOptionText = initDropdown.options[i].text;
                break; // Exit the loop when the selected option is found
            }
        }
        modalInit()
        pushModal()
    }

    function resizeSections() {
        let variety = [
            "section='1'",
            "attack",
            "bonus",
            "react",
            "section='2'",
        ];
        variety.forEach((item) => {
            let grab = document.querySelectorAll(`[data-round] [data-${item}]`);
            let maxWidth = 0;
            grab.forEach((round) => {
                maxWidth =
                    maxWidth > round.clientWidth ? maxWidth : round.clientWidth;
            });
            grab.forEach((round) => {
                round.style.width = maxWidth + "px";
            });
        });
    }

    function navify() {
        document.addEventListener("keydown", keydownEventListener);
        document.addEventListener("click", clickEventListener);

        document.addEventListener("click", async function (event) {
            if (event.target.getAttribute("data-nav")) {
                // const outOfRange = await checkOutOfRange("2", event);
                // if (!outOfRange) {
                let myElement = document.querySelectorAll(".selected");
                let nav = myElement[0].getAttribute("data-nav");
                let targetNum = Number(nav) + 1;
                let newTarget;
                if (nav < cellCountVertical - 1) {
                    myElement.forEach((ele) => {
                        ele.classList.remove("selected");
                    });
                    newTarget = document.querySelector(
                        '[data-nav="' + targetNum + '"]'
                    );
                    event.target.classList.add("selected");
                    event.target.nextSibling.classList.add("selected");
                    event.target.nextSibling.nextSibling.classList.add(
                        "selected"
                    );
                    event.target.nextSibling.nextSibling.nextSibling.classList.add(
                        "selected"
                    );
                }
                // }
            }
        });

        // Get a reference to the initiative dropdown element
        let dropdown = document.querySelector(".initDropdown");
        // Add an event listener to the initiative dropdown to detect changes
        dropdown.addEventListener("change", function () {
            // Loop through the options to find the selected one
            let options = dropdown.options;
            for (let i = 0; i < options.length; i++) {
                if (options[i].selected) {
                    // Remove the selected attribute from all options
                    for (let j = 0; j < options.length; j++) {
                        options[j].removeAttribute("selected");
                    }
                    // Add the selected attribute to the currently selected option
                    options[i].setAttribute("selected", "selected");
                    break; // Exit the loop when the selected option is found
                }
            }
        });


    }

    function new_encounter(encounterID) {
        let modalContainer = document.createElement("div");
        modalContainer.innerHTML;

        let innerContainer = document.createElement("div");
        innerContainer.classList.add("modalContainer");

        let participantsHeader = document.createElement("h2");
        participantsHeader.innerText = "Participants";

        let x = document.getElementById("modal-body");
        x.innerHTML = modalContainer.outerHTML;
        launchActionModal();
    }

    function launchActionModal(event) {
        modalActions();
        pushModal()
    }

    function closeModalBox(closeModal) {
        closeModal.addEventListener("click", function (e) {
            modal.style.display = "none";
        });
        window.addEventListener("click", function (e) {
            if (e.target == modal) {
                modal.style.display = "none";
            }
        });
    }

    async function checkOutOfRange(modifier, event) {
        let lastActionRow = await dbQuery("GET", "getLatestActionRow");
        let myElement = event.target
        let nav = myElement.getAttribute("data-nav");
        // alert(nav + " vs. " + lastActionRow[0].row)
        // if (nav > lastActionRow[0].row + modifier) {
        if (nav - lastActionRow[0].row >= modifier) {
            // build a modal that asks if you're okay with being out of range
            // if the user is okay with it, return false
            return new Promise((resolve) => {
                let modal = document.querySelector("#modal-body");
                let content = `
                
                        <p>Warning: The row you've tried to select is potentially out of range! Would you like to continue anyway?</p>
                        <div class="line center-div-align-left">
                        <button id="continueButton" class="close-modal" onclick="closeModalBox()">Yes</button>
                        <button id="cancelButton" class="close-modal" onclick="closeModalBox()">Cancel</button>
                </div>
            `
                modal.innerHTML = content;
                pushModal();

                document.getElementById("continueButton").addEventListener("click", function () {
                    // Add your code to execute if the user chose to continue
                    resolve(false)
                });

                document.getElementById("cancelButton").addEventListener("click", function () {
                    // Add your code to execute if the user chose to cancel
                    resolve(true);
                });
            })


        }



    }


    const keydownEventListener = async function (event) {
        if (event.key === "ArrowDown") {
            // const outOfRange = await checkOutOfRange("1", event);
            // if (!outOfRange) {
            let myElement = document.querySelectorAll(".selected");
            let nav = myElement[0].getAttribute("data-nav");
            let targetNum = Number(nav) + 1;
            let newTarget;
            if (nav < cellCountVertical - 1) {
                myElement.forEach((ele) => {
                    ele.classList.remove("selected");
                });
                newTarget = document.querySelector(
                    '[data-nav="' + targetNum + '"]'
                );
                newTarget.classList.add("selected");
                newTarget.nextSibling.classList.add("selected");
                newTarget.nextSibling.nextSibling.classList.add("selected");
                newTarget.nextSibling.nextSibling.nextSibling.classList.add(
                    "selected"
                );
                if (newTarget.classList.contains("selected")) {
                    if (
                        newTarget.parentElement.parentElement.classList.contains(
                            "sometimes_hidden"
                        ) &&
                        newTarget.classList.contains("selected")
                    ) {
                        let p = document.querySelectorAll(".sometimes_hidden");
                        p.forEach((element) => {
                            element.classList.remove("hidden");
                        });
                    } else {
                        let p = document.querySelectorAll(".sometimes_hidden");
                        p.forEach((element) => {
                            element.classList.add("hidden");
                        });
                    }
                }
                newTarget.scrollIntoViewIfNeeded(true);
            }

            // }
        } else if (event.key === "ArrowUp") {
            // const outOfRange = await checkOutOfRange("3", event);
            // if (!outOfRange) {
            let myElement = document.querySelectorAll(".selected");
            let nav = myElement[0].getAttribute("data-nav");
            let targetNum = Number(nav) - 1;
            let newTarget;
            if (nav != 1) {
                myElement.forEach((ele) => {
                    ele.classList.remove("selected");
                });
                newTarget = document.querySelector(
                    '[data-nav="' + targetNum + '"]'
                );
                newTarget.classList.add("selected");
                newTarget.nextSibling.classList.add("selected");
                newTarget.nextSibling.nextSibling.classList.add("selected");
                newTarget.nextSibling.nextSibling.nextSibling.classList.add(
                    "selected"
                );
                if (newTarget.classList.contains("selected")) {
                    if (
                        newTarget.parentElement.parentElement.classList.contains(
                            "sometimes_hidden"
                        ) &&
                        newTarget.classList.contains("selected")
                    ) {
                        let p = document.querySelectorAll(".sometimes_hidden");
                        p.forEach((element) => {
                            element.classList.remove("hidden");
                        });
                    } else {
                        let p = document.querySelectorAll(".sometimes_hidden");
                        p.forEach((element) => {
                            element.classList.add("hidden");
                        });
                    }
                }
                newTarget.scrollIntoViewIfNeeded(true);
            }
            // }
        } else if (event.altKey && event.key == "Enter") {
            launchActionModal("turn");
        } else if (event.altKey && event.keyCode == 81) {
            launchConditionsModal("turn");
        } else if (event.altKey && event.keyCode == 67) {
            alert("HUZZAH!");
        }
    };

    function launchConditionsModal(
        affected,
        concentration,
        conditionName,
        holding,
        holdingOneRound,
        nextAID
    ) {
        if (affected == "turn") {
            concentration = 0;
        }
        modalConditions(
            affected,
            concentration,
            conditionName,
            holding,
            holdingOneRound,
            nextAID
        );
        pushModal()
    }

    function launchInitModal(selectedOptionText) {
        pushModal()
    }

    function pushModal() {
        let modal = document.querySelector(".modal");
        let closeModalButtons = document.querySelectorAll(".close-modal");
        modal.style.display = "block";

        // Add the event listener or perform actions for each close button
        closeModalButtons.forEach(function (closeModal) {
            closeModalBox(closeModal);
        });
    }

    const clickEventListener = async function (event) {
        if (event.target.getAttribute("data-nav")) {
            // const outOfRange = await checkOutOfRange("2", event);
            // if (!outOfRange) {
            let myElement = document.querySelectorAll(".selected");
            let nav = myElement[0].getAttribute("data-nav");
            let targetNum = Number(nav) + 1;
            let newTarget;
            if (nav < cellCountVertical - 1) {
                myElement.forEach((ele) => {
                    ele.classList.remove("selected");
                });
                newTarget = document.querySelector(
                    '[data-nav="' + targetNum + '"]'
                );
                event.target.classList.add("selected");
                event.target.nextSibling.classList.add("selected");
                event.target.nextSibling.nextSibling.classList.add("selected");
                event.target.nextSibling.nextSibling.nextSibling.classList.add(
                    "selected"
                );
            }
            // }
        }
    };
</script>