<script>
    let cellCountVertical = 1;

    async function dbQuery(httpReqType, httpReqString) {
        // arguments should look something like "GET" and "getSomethingFromBackEnd/42/true"
        let dbReturn = makePromise(httpReqType, httpReqString);
        let dbReturnJSON = await dbReturn;
        let unpackdbReturn = JSON.parse(dbReturnJSON);
        return unpackdbReturn;

        function makePromise(httpReqType, httpReqString) {
            httpReqString = httpReqString;
            let request = new Promise((resolve, reject) => {
                let xhr = new XMLHttpRequest();
                xhr.open(httpReqType, "../" + httpReqString, true);
                xhr.onload = () => {
                    if (xhr.status === 200) {
                        const text = xhr.responseText;
                        resolve(text);
                    } else {
                        reject(xhr.statusText);
                    }
                };
                xhr.onerror = () => reject("Request Failed");
                xhr.send();
            });
            return request;
        }
    }

    function findLargestSubarray(arr) {
        let largestSubarray = arr[0];
        let largestLength = arr[0]?.length;
        for (let i = 1; i < arr?.length; i++) {
            if (arr[i].length > largestLength) {
                largestSubarray = arr[i];
                largestLength = arr[i].length;
            }
        }
        return largestLength;
    }

    function buildASection(
        actionType,
        ctRound,
        numberActions,
        roundParticipants
    ) {
        let round = ctRound;
        for (let j = 1; j <= numberActions; j++) {
            let section2 = document.createElement("div");

            section2.classList.add("ct_grid4columns");
            section2.setAttribute("data-" + actionType, j);

            let div5 = document.createElement("div");
            div5.classList.add("section");
            div5.classList.add("header");
            div5.classList.add(
                actionType +
                (actionType == "attack" && j % 2 == 0 ? "_alt" : "")
            );
            div5.classList.add("center");
            div5.textContent =
                actionType.charAt(0).toUpperCase() +
                actionType.substring(1) +
                (numberActions > 1 ? " #" + j : "");
            let div6 = document.createElement("div");
            div6.classList.add("section");
            div6.classList.add("header");
            div6.classList.add(
                actionType +
                (actionType == "attack" && j % 2 == 0 ? "_alt" : "")
            );
            div6.classList.add("center");
            div6.textContent = "Hit?";
            let div7 = document.createElement("div");
            div7.classList.add("section");
            div7.classList.add("header");
            div7.classList.add(
                actionType +
                (actionType == "attack" && j % 2 == 0 ? "_alt" : "")
            );
            div7.classList.add("center");
            div7.textContent = "Target(s)";
            let div8 = document.createElement("div");
            div8.classList.add("section");
            div8.classList.add("header");
            div8.classList.add(
                actionType +
                (actionType == "attack" && j % 2 == 0 ? "_alt" : "")
            );
            div8.classList.add("center");
            div8.textContent = "hp";
            section2.appendChild(div5);
            section2.appendChild(div6);
            section2.appendChild(div7);
            section2.appendChild(div8);
            roundParticipants.forEach((participant) => {
                let div9 = document.createElement("div");
                div9.classList.add("section");
                div9.classList.add(
                    actionType +
                    (actionType == "attack" && j % 2 == 0 ? "_alt" : "")
                );
                div9.classList.add("center");
                div9.setAttribute("data-participant", participant.pID);
                let div10 = document.createElement("div");
                div10.classList.add("section");
                div10.classList.add(
                    actionType +
                    (actionType == "attack" && j % 2 == 0 ? "_alt" : "")
                );
                div10.classList.add("center");
                let div11 = document.createElement("div");
                div11.classList.add("section");
                div11.classList.add(
                    actionType +
                    (actionType == "attack" && j % 2 == 0 ? "_alt" : "")
                );
                div11.classList.add("center");
                let div12 = document.createElement("div");
                div12.classList.add("section");
                div12.classList.add(
                    actionType +
                    (actionType == "attack" && j % 2 == 0 ? "_alt" : "")
                );
                div12.classList.add("center");
                section2.appendChild(div9);
                section2.appendChild(div10);
                section2.appendChild(div11);
                section2.appendChild(div12);
                round.appendChild(section2);
            });
        }
        return round;
    }

    async function load_encounter(encounterCode = 0) {
        let latestID = await dbQuery("GET", "latest_eID");
        let encounterID;
        if (encounterCode == 0) {
            encounterID = latestID[0]?.eID || 0;
        } else if (encounterCode == 1) {
            // get encounterID from selected value in dropdown
            let html = document
                .querySelector(".indexDrpDwn")
                .getAttribute("value");
        }
        if (encounterID == 0) {
            // initiate modal to request info for new encounter:
            // name of the encounter;
            // participants;
            // initiative

            new_encounter(encounterID);
        }
        let encounter = await dbQuery(
            "GET",
            "selected_encounter/" + encounterID
        );
        let header = document.querySelector(".main_header");

        header.textContent = `${encounter[0]?.campaign || "No available encounters yet"
            } - ${encounter[0]?.location || ""} (${encounter[0]?.description || ""
            })`;

        ctApp = await dbQuery("GET", "participants/" + encounterID);

        // get all the actions of this encounter
        let ctActions = await dbQuery("GET", "actions/" + encounterID);

        // determine how many rounds are represented in the database
        let totalRounds = ctActions.reduce((max, obj) => {
            return obj.round > max ? obj.round : max;
        }, -Infinity);

        // calculate # of rounds
        let ct_damages = await dbQuery("GET", "damages/" + encounterID);
        let damageRounds = 1;
        try {
            damageRounds =
                ct_damages?.reduce((max, obj) => {
                    return obj.round > max.round ? obj : max;
                }).round || 1;
        } catch (err) { }

        totalRounds = Math.max(totalRounds, damageRounds);

        // start a loop, round.forEach()
        let mainContainer = document.createElement("div");
        for (let i = 1; i <= totalRounds + 1; i++) {
            // determine which of the participants should be in this round
            let roundParticipants = ctApp.filter(
                (participant) =>
                    participant.join_round <= i &&
                    (participant.dead_round || 500) >= i
            );

            // build the wireframe of first section (participants);

            let ctRound = document.createElement("div");
            ctRound.classList.add("ct_round");
            ctRound.setAttribute("data-round", i);

            let section1 = document.createElement("div");
            section1.classList.add("ct_grid4columns");
            section1.setAttribute("data-section", "1");

            let div1 = document.createElement("div");
            div1.classList.add("section");
            div1.classList.add("header");
            div1.classList.add("ct_turn_bookends");
            div1.classList.add("center");
            div1.textContent = "AC";
            let div2 = document.createElement("div");
            div2.classList.add("section");
            div2.classList.add("header");
            div2.classList.add("ct_turn_bookends");
            div2.classList.add("center");
            div2.textContent = "HP";
            let div3 = document.createElement("div");
            div3.classList.add("section");
            div3.classList.add("header");
            div3.classList.add("ct_turn_bookends");
            div3.classList.add("center");
            div3.textContent = "Character";
            let div4 = document.createElement("div");
            div4.classList.add("section");
            div4.classList.add("header");
            div4.classList.add("ct_turn_bookends");
            div4.classList.add("center");
            div4.textContent = "Init";

            section1.appendChild(div1);
            section1.appendChild(div2);
            section1.appendChild(div3);
            section1.appendChild(div4);

            ctRound.appendChild(section1);
            mainContainer.appendChild(ctRound);

            for (let j = 0; j <= roundParticipants.length - 1; j++) {
                let div5 = document.createElement("div");
                div5.classList.add("section");
                div5.classList.add("ct_turn_bookends");
                div5.classList.add("center");
                div5.setAttribute("data-participant", roundParticipants[j].pID);
                div5.setAttribute("data-nav", cellCountVertical);
                div5.setAttribute("tabindex", cellCountVertical)
                div5.setAttribute("data-round", i);
                cellCountVertical += 1;
                let div6 = document.createElement("div");
                div6.classList.add("section");
                div6.classList.add("ct_turn_bookends");
                div6.classList.add("center");
                let div7 = document.createElement("div");
                div7.classList.add("section");
                div7.classList.add("ct_turn_bookends");
                div7.classList.add("center");
                let div8 = document.createElement("div");
                div8.classList.add("section");
                div8.classList.add("ct_turn_bookends");
                div8.classList.add("center");
                section1.appendChild(div5);
                section1.appendChild(div6);
                section1.appendChild(div7);
                section1.appendChild(div8);
            }
            ctRound.appendChild(section1);

            // how many attack, bonus, and react sections are needed for this round?
            let attacksThisRound = [];
            let bonusThisRound = [];
            let reactThisRound = [];
            roundParticipants.forEach((participant) => {
                attacksThisRound.push(
                    ctActions.filter((action) => {
                        return (
                            action.pID == participant.pID &&
                            action.action_type == "attack" &&
                            action.round == i
                        );
                    })
                );
            });
            roundParticipants.forEach((participant) => {
                bonusThisRound.push(
                    ctActions.filter((action) => {
                        return (
                            action.pID == participant.pID &&
                            action.action_type == "bonus" &&
                            action.round == i
                        );
                    })
                );
            });
            roundParticipants.forEach((participant) => {
                reactThisRound.push(
                    ctActions.filter((action) => {
                        return (
                            action.pID == participant.pID &&
                            action.action_type == "react" &&
                            action.round == i
                        );
                    })
                );
            });
            let numAttacks = findLargestSubarray(attacksThisRound);
            numAttacks = Math.max(numAttacks, 1);
            let bonusActions = findLargestSubarray(bonusThisRound);
            let reactActions = findLargestSubarray(reactThisRound);

            // build the attack section(s), empty; we'll fill 'em up at the end of the loop
            let sectionHTML = buildASection(
                "attack",
                ctRound,
                numAttacks,
                roundParticipants
            );
            mainContainer.appendChild(sectionHTML);

            // build the bonus section if there is one, empty.
            sectionHTML = buildASection(
                "bonus",
                ctRound,
                bonusActions,
                roundParticipants
            );
            mainContainer.appendChild(sectionHTML);

            // build the reaction section if there is one, empty
            sectionHTML = buildASection(
                "react",
                ctRound,
                reactActions,
                roundParticipants
            );
            mainContainer.appendChild(sectionHTML);

            // build the final section, empty
            let section2 = document.createElement("div");
            section2.classList.add("ct_grid4columns");
            section2.setAttribute("data-section", 2);

            let div5 = document.createElement("div");
            div5.classList.add("section");
            div5.classList.add("header");
            div5.classList.add("ct_turn_bookends");
            div5.classList.add("center");
            div5.textContent = "Drop";
            let div6 = document.createElement("div");
            div6.classList.add("section");
            div6.classList.add("header");
            div6.classList.add("ct_turn_bookends");
            div6.classList.add("align_left");
            div6.textContent = "Start";
            let div7 = document.createElement("div");
            div7.classList.add("section");
            div7.classList.add("header");
            div7.classList.add("ct_turn_bookends");
            div7.classList.add("align_right");
            div7.textContent = "End";
            let div8 = document.createElement("div");
            div8.classList.add("section");
            div8.classList.add("header");
            div8.classList.add("ct_turn_bookends");
            div8.classList.add("center");
            div8.textContent = "Notes";
            section2.appendChild(div5);
            section2.appendChild(div6);
            section2.appendChild(div7);
            section2.appendChild(div8);

            roundParticipants.forEach((participant) => {
                let div9 = document.createElement("div");
                div9.classList.add("section");
                div9.classList.add("ct_turn_bookends");
                div9.classList.add("center");
                div9.setAttribute("div-participant", participant.pID);
                let div10 = document.createElement("div");
                div10.classList.add("section");
                div10.classList.add("ct_turn_bookends");
                div10.classList.add("align_left");
                let div11 = document.createElement("div");
                div11.classList.add("section");
                div11.classList.add("ct_turn_bookends");
                div11.classList.add("align_right");
                let div12 = document.createElement("div");
                div12.classList.add("section");
                div12.classList.add("ct_turn_bookends");
                div12.classList.add("center");
                section2.appendChild(div9);
                section2.appendChild(div10);
                section2.appendChild(div11);
                section2.appendChild(div12);
            });
            ctRound.appendChild(section2);

            mainContainer.appendChild(ctRound);
            let headerText = document.createElement("h2");
            headerText.textContent =
                i == totalRounds + 1 ? "" : "Round " + (i + 1);
            mainContainer.appendChild(headerText);

            // populate the sections
            let roundActions = ctActions.filter((action) => {
                return action.round == i;
            });

            // populate participants
            // let participantHTML;
            roundParticipants.forEach(async (participant) => {
                // find latest damage report for this user;
                // if no damages at all, apply participant's starting_hp;
                // else, if no damages for this round, check previous round
                // and so on;

                // figure out hit points by round
                let roundDamages = ct_damages.filter((item) => {
                    return (
                        item.round == i && item.target_pID == participant.pID
                    );
                });
                // sort oldest to newest, e.g. hit points cell might read "22, 15, 13" (hp descending as they take hits)
                roundDamages.sort((a, b) => a.tID - b.tID);

                // locate the HTML elements for this participant
                participantHTML = mainContainer.querySelectorAll(
                    '[data-round="' +
                    i +
                    '"] [data-section="1"] [data-participant="' +
                    participant.pID +
                    '"]'
                );

                //     // for each HTML element that goes with this participant...
                participantHTML.forEach((turn, index) => {
                    turn.innerText =
                        participant.ac +
                        (participant.ac_secondary == null
                            ? ""
                            : " / " + participant.ac_secondary);

                    let damageObjects = roundDamages.filter((item) => {
                        return item.target_pID == participant.pID;
                    });

                    // put starting hp on the board
                    turn.nextSibling.innerHTML =
                        i === 1 ? `<b>${participant.starting_hp}</b>` : "";

                    // if hit points drop below 50%, yellow background for character in question; if drop to zero, red.
                    let carryForwardHP = "";
                    damageObjects.forEach((item) => {
                        try {
                            let previousHP = mainContainer.querySelector(
                                '[data-round="' +
                                (i - 1) +
                                '"] [data-section="1"] [data-participant="' +
                                participant.pID +
                                '"]'
                            );
                            const arr =
                                previousHP.nextSibling.innerHTML.split(","); // split the string into an array based on comma delimiter
                            const lastNum = arr.pop().trim(); // remove and return the last element of the array, and trim any whitespace
                            carryForwardHP = lastNum;
                        } catch (err) { }
                        // add hit points for this row
                        turn.nextSibling.innerHTML =
                            carryForwardHP +
                            (carryForwardHP != "" ? ", " : "") +
                            turn.nextSibling.innerHTML +
                            (turn.nextSibling.innerText == "" ? "" : ", ") +
                            item.new_hp;
                    });

                    // check to see if participant pID is in roundDamages
                    if (damageObjects.length == 0 && i !== 1) {
                        let damageCheck = ct_damages.filter((item) => {
                            return item.target_pID == participant.pID;
                        });
                        if (damageCheck.length > 0) {
                            turn.nextSibling.innerText =
                                damageCheck[damageCheck.length - 1].new_hp;
                        } else {
                            turn.nextSibling.innerHTML = `<b>${participant.starting_hp}</b>`;
                        }
                    }
                    turn.nextSibling.nextSibling.innerText =
                        participant.character_name +
                        (participant.numeric_value == null
                            ? ""
                            : " #" + participant.numeric_value);
                    turn.nextSibling.nextSibling.nextSibling.innerText =
                        participant.init;
                });
                participantHTML.forEach((turn, index) => {
                    let newValue = turn.nextSibling.innerText.split(",");
                    // if newValue contains comma, get what's to the right of the last comma
                    // const arr = previousHP.nextSibling.innerHTML.split(","); // split the string into an array based on comma delimiter
                    const lastNum = newValue.pop().trim(); // remove and return the last element of the array, and trim any whitespace
                    // compare that value to participant.starting_hp
                    if (lastNum <= participant.starting_hp / 2) {
                        turn.classList.add("yellow");
                        turn.nextSibling.classList.add("yellow");
                        turn.nextSibling.nextSibling.classList.add("yellow");
                        turn.nextSibling.nextSibling.nextSibling.classList.add(
                            "yellow"
                        );
                    } else if (lastNum <= 0) {
                        turn.classList.add("red");
                        turn.nextSibling.classList.add("red");
                        turn.nextSibling.nextSibling.classList.add("red");
                        turn.nextSibling.nextSibling.nextSibling.classList.add(
                            "red"
                        );
                    }
                });
            });
        }

        for (const action of ctActions) {
            let tool = await dbQuery("GET", "tool/" + action.toolID);
            let target = await dbQuery("GET", "target/" + action.targetID);
            let targets = await dbQuery("GET", "targets/" + target[0].targetID);
            let targetString = "";
            let damageString = "";
            targets.forEach((item, index) => {
                targetString +=
                    (index > 0 ? " / " : "") +
                    item.character_name +
                    (item.numeric_value != 0 ? " #" + item.numeric_value : "");
                damageString += (index > 0 ? " / " : "") + item.damage;
            });
            let actionArray = [];
            actionArray[0] = tool[0].toolName;
            actionArray[1] = action.hit == 1 ? "<b class='lightred'>X</b>" : "";
            actionArray[2] = targetString;
            actionArray[3] = damageString;
            await sendToCoordinate(
                action.round,
                action.pID,
                action.action_type,
                actionArray
            );
        }

        document.querySelector(".ct_round_container").innerHTML =
            mainContainer.innerHTML;
        resizeSections();
        try {
            let startNav = document.querySelector('[data-nav="1"]');
            startNav.classList.add("selected");
            startNav.nextSibling.classList.add("selected");
            startNav.nextSibling.nextSibling.classList.add("selected");
            startNav.nextSibling.nextSibling.nextSibling.classList.add(
                "selected"
            );
            navify();
        } catch (err) { }

        function sendToCoordinate(round, participant, actionType, actionArray) {
            let actionHTML = "data-" + actionType;
            let action = 1;
            let x;
            do {
                x = mainContainer.querySelector(
                    `[data-round="${round}"] [${actionHTML}="${action}"] [data-participant="${participant}"]`
                );
                action += 1;
            } while (x.innerHTML !== "");
            x.innerHTML = actionArray[0];
            x.nextSibling.innerHTML = actionArray[1];
            x.nextSibling.nextSibling.innerHTML = actionArray[2];
            x.nextSibling.nextSibling.nextSibling.innerHTML = actionArray[3];
        }
        // fill values for dropdown
        fillDropdown(encounterCode);
    }

    async function fillDropdown(encounterID) {
        let encounters = await dbQuery("GET", "encounters");
        let html = document.querySelector(".indexDrpDwn");
        let container = document.createElement("div");

        encounters.forEach((encounter, index) => {
            let option = document.createElement("option");
            option.setAttribute("value", encounter.eID);
            option.innerText =
                "(" +
                encounter.eID +
                ") " +
                encounter.campaign +
                ": " +
                encounter.location +
                " (" +
                encounter.description +
                ")";
            if (encounterID == encounter.eID) {
                option.setAttribute("selected", "true");
            } else if (encounterID == 0 && index == encounters.length - 1) {
                option.setAttribute("selected", "true");
            }
            html.appendChild(option);
        });
    }

    function resizeSections() {
        let variety = [
            "section='1'",
            "attack",
            "bonus",
            "react",
            "section='2'",
        ];
        variety.forEach((item) => {
            let grab = document.querySelectorAll(`[data-round] [data-${item}]`);
            let maxWidth = 0;
            grab.forEach((round) => {
                maxWidth =
                    maxWidth > round.clientWidth ? maxWidth : round.clientWidth;
            });
            grab.forEach((round) => {
                round.style.width = maxWidth + "px";
            });
        });
    }

    function navify() {
        document.addEventListener("keydown", function (event) {
            // Check if the key pressed was the down arrow
            if (event.key === "ArrowDown") {
                let myElement = document.querySelectorAll(".selected");
                let nav = myElement[0].getAttribute("data-nav");
                let targetNum = Number(nav) + 1;
                let newTarget;
                if (nav < cellCountVertical - 1) {
                    myElement.forEach((ele) => {
                        ele.classList.remove("selected");
                    });
                    newTarget = document.querySelector(
                        '[data-nav="' + targetNum + '"]'
                    );
                    newTarget.classList.add("selected");
                    newTarget.nextSibling.classList.add("selected");
                    newTarget.nextSibling.nextSibling.classList.add("selected");
                    newTarget.nextSibling.nextSibling.nextSibling.classList.add(
                        "selected"
                    );
                }
            }
        });
        document.addEventListener("keydown", function (event) {
            // Check if the key pressed was the up arrow
            if (event.key === "ArrowUp") {
                let myElement = document.querySelectorAll(".selected");
                let nav = myElement[0].getAttribute("data-nav");
                let targetNum = Number(nav) - 1;
                let newTarget;
                if (nav != 1) {
                    myElement.forEach((ele) => {
                        ele.classList.remove("selected");
                    });
                    newTarget = document.querySelector(
                        '[data-nav="' + targetNum + '"]'
                    );
                    newTarget.classList.add("selected");
                    newTarget.nextSibling.classList.add("selected");
                    newTarget.nextSibling.nextSibling.classList.add("selected");
                    newTarget.nextSibling.nextSibling.nextSibling.classList.add(
                        "selected"
                    );
                }
            }
        });
        document.addEventListener("keydown", function (event) {
            // Check if the key pressed was the up arrow
            if (event.altKey && event.key == "Enter") {
                launchActionModal("turn");
            }
            if (event.altKey && event.keyCode == 67) {
                alert("HUZZAH!")
            }
        });
        document.addEventListener("click", function (event) {
            if (event.target.getAttribute("data-nav")) {
                let myElement = document.querySelectorAll(".selected");
                let nav = myElement[0].getAttribute("data-nav");
                let targetNum = Number(nav) + 1;
                let newTarget;
                if (nav < cellCountVertical - 1) {
                    myElement.forEach((ele) => {
                        ele.classList.remove("selected");
                    });
                    newTarget = document.querySelector(
                        '[data-nav="' + targetNum + '"]'
                    );
                    event.target.classList.add("selected");
                    event.target.nextSibling.classList.add("selected");
                    event.target.nextSibling.nextSibling.classList.add("selected");
                    event.target.nextSibling.nextSibling.nextSibling.classList.add(
                        "selected"
                    );
                }
            }

        });
    }

    function move() {
        let selected = document.querySelector(".selected");
        selected.nextSibling.nextSibling.nextSibling.classList.add(".selected");
    }

    function findLatestDamage(roundDamages, currentRound, pID, totalRounds) {
        let highestValueObj;
        for (let i = totalRounds - 1; i > 0; i--) {
            let p = roundDamages.filter((item) => {
                return (
                    item.round == currentRound && pID == roundDamages.target_pID
                );
            });

            if (p.length > 0) {
                highestValueObj = p.reduce((acc, cur) => {
                    return cur.tID > acc.tID ? cur : acc;
                });
                return highestValueObj;
            } else {
                return "";
            }
        }
    }

    async function selectRow() {
        let row = document.querySelector(
            '[data-round="1"] [data-section="1"] [data-participant="2"]'
        );
        row.classList.add("selected");
        row.nextSibling.classList.add("selected");
        row.nextSibling.nextSibling.classList.add("selected");
        row.nextSibling.nextSibling.nextSibling.classList.add("selected");
    }

    function new_encounter(encounterID) {
        let modalContainer = document.createElement("div");
        modalContainer.innerHTML;

        let innerContainer = document.createElement("div");
        innerContainer.classList.add("modalContainer");

        let participantsHeader = document.createElement("h2");
        participantsHeader.innerText = "Participants";
        // choose participants

        // assign initiative

        // app.js:
        // insert encounter into db with encounterID
        // insert participants with encounterID and initiative

        let x = document.getElementById("modal-body");
        x.innerHTML = modalContainer.outerHTML;
        launchActionModal();
    }

    function launchActionModal(event) {
        modalTurn();
        let modal = document.querySelector(".modal");
        let closeModal = document.querySelector(".close-modal");
        modal.style.display = "block";
        closeModalBox(closeModal);
    }

    function closeModalBox(closeModal) {
        closeModal.addEventListener("click", function (e) {
            modal.style.display = "none";
        });
        window.addEventListener("click", function (e) {
            if (e.target == modal) {
                modal.style.display = "none";
            }
        });
    }

    async function modalTurn() {
        let modal = document.querySelector("#modal-body");
        let html = document.querySelector(".selected");
        let dataNavSelected = html.getAttribute('data-nav')
        let participantID = html.getAttribute("data-participant");
        let characterID = ctApp.find((participant) => {
            return participant.pID == participantID
        }).chID
        console.log(characterID)
        let currentRound = html.getAttribute("data-round");
        let encounter = ctApp[0].eID;

        // get participant's info
        // tools
        let participantTools = await dbQuery(
            "GET",
            "participantTools/" + characterID
        );
        // targets
        let allParticipants = ctApp.filter((participant) => {
            return (
                participant.join_round <= currentRound &&
                (participant.dead_round >= currentRound ||
                    participant.dead_round == "")
            );
        });
        // conditions in effect (with option to end them)
        let conditionsInEffect = await dbQuery(
            "GET",
            "conditionsInEffect/" + encounter + "/" + currentRound
        );

        // build the HTML
        let container = document.createElement("div");
        container.classList.add("modal-body");

        let h3 = document.createElement("h3");
        let character = ctApp.find((participant) => {
            return participant.pID == participantID;
        });
        h3.innerHTML =
            character.character_name +
            (character.numeric_value ? " #" + character.numeric_value : "");
        container.appendChild(h3);

        let divModalTop = document.createElement("div");
        divModalTop.classList.add("flex_horizontal");

        let divLeft = document.createElement("div");
        divLeft.classList.add("flex-left");

        // load weapons/tools
        let div13 = document.createElement("div");
        let div1Title = document.createElement("h2");
        div1Title.classList.add("left");
        div1Title.innerHTML = "Weapons/Tools";
        div13.appendChild(div1Title);

        let div14 = document.createElement("div");
        let defaultTool = document.createElement("input");
        defaultTool.setAttribute("type", "radio");
        defaultTool.setAttribute("value", 0);
        defaultTool.setAttribute("id", "default");
        defaultTool.setAttribute("name", "weapons");
        let defaultLabel = document.createElement("label");
        defaultLabel.setAttribute("for", "default");
        defaultLabel.classList.add("radio_buttons");
        defaultLabel.innerHTML = "NONE";
        defaultLabel.setAttribute("default", "true");
        let br1 = document.createElement("br");
        div14.appendChild(defaultTool);
        div14.appendChild(defaultLabel);
        div14.appendChild(br1);

        participantTools.forEach((item) => {
            let tool = document.createElement("input");
            tool.setAttribute("type", "radio");
            tool.setAttribute("value", item.toolID);
            tool.setAttribute("id", item.toolID)
            tool.setAttribute("name", "weapons");
            let label = document.createElement("label");
            label.setAttribute("for", item.toolID);
            label.classList.add("radio_buttons");
            label.innerHTML =
                item.toolName +
                (item.damage_dice ? " (" + item.damage_dice + ")" : "");
            let br = document.createElement("br");
            div14.appendChild(tool);
            div14.appendChild(label);
            div14.appendChild(br);
        });

        divLeft.appendChild(div13);

        let weaponTextInput = document.createElement("input");
        weaponTextInput.setAttribute("type", "text");
        // weaponTextInput.setAttribute("value", item.toolID);
        // weaponTextInput.setAttribute("id", item.toolID);
        weaponTextInput.setAttribute("name", "weapons");
        weaponTextInput.classList.add("text_field");
        let label1 = document.createElement("label");

        // label1.setAttribute("for", item.toolID);
        let br2 = document.createElement("br");
        div14.appendChild(weaponTextInput);
        div14.appendChild(label1);
        div14.appendChild(br2);

        divLeft.appendChild(div14);

        divModalTop.appendChild(divLeft);

        let divMiddleLeft = document.createElement("div");
        divMiddleLeft.classList.add("modal_column");
        let anotherDiv = document.createElement("div");
        let actionsArray = ["dash", "disarm", "disengage", "dodge", "escape", "grapple", "help", "hide", "improvise", "ready", "search", "shove", "use an object"]
        actionsArray.forEach((action) => {
            let actionsRadio = document.createElement("input");
            actionsRadio.setAttribute("type", "radio");
            actionsRadio.setAttribute("value", action);
            actionsRadio.setAttribute("id", action);
            actionsRadio.setAttribute("name", "weapons");
            let label = document.createElement("label");
            label.setAttribute("for", action);
            label.classList.add("radio_buttons");
            label.innerHTML = action;
            let br = document.createElement("br");
            anotherDiv.appendChild(actionsRadio);
            anotherDiv.appendChild(label);
            anotherDiv.appendChild(br);
        })

        divMiddleLeft.appendChild(anotherDiv)

        divModalTop.appendChild(divMiddleLeft);

        let divMiddleRight = document.createElement("div");
        divMiddleRight.classList.add("modal_column");
        let anotherDiv2 = document.createElement("div");
        anotherDiv2.classList.add("modal_column_int")
        let actions2 = ["action", "bonus", "reaction", "other"]

        actions2.forEach((action) => {
            let actionsRadio = document.createElement("input");
            actionsRadio.setAttribute("type", "radio");
            actionsRadio.setAttribute("value", action);
            if (action == "action") {
                actionsRadio.setAttribute("checked", "true")
            }
            actionsRadio.setAttribute("id", action);
            actionsRadio.setAttribute("name", "actions");
            let label = document.createElement("label");
            label.setAttribute("for", action);
            label.classList.add("radio_buttons");
            label.innerHTML = action;
            let br = document.createElement("br");
            anotherDiv2.appendChild(actionsRadio);
            anotherDiv2.appendChild(label);
            anotherDiv2.appendChild(br);
        })

        divMiddleRight.appendChild(anotherDiv2)

        divModalTop.appendChild(divMiddleRight);

        let divRight = document.createElement("div");
        divRight.classList.add("flex-right");

        let div15 = document.createElement("h2");
        div15.innerHTML = "Targets / Damage/HP";
        divRight.appendChild(div15);
        let div16 = document.createElement("div");

        allParticipants.forEach((participant) => {
            let target = document.createElement("input");
            target.setAttribute("type", "text");
            target.setAttribute("value", "");
            target.classList.add("text_field");
            target.classList.add("numeric");
            target.setAttribute("name", "participants")
            target.setAttribute("id", participant.pID);
            let targetLabel = document.createElement("label");
            targetLabel.setAttribute("for", participant.pID);
            targetLabel.classList.add("radio_buttons");
            targetLabel.innerHTML =
                participant.character_name +
                (participant.numeric_value
                    ? " #" + participant.numeric_value
                    : "");

            let br3 = document.createElement("br");
            div16.appendChild(target);
            div16.appendChild(targetLabel);
            div16.appendChild(br3);
        });

        divRight.appendChild(div16);

        let notesLabel = document.createElement("h2");
        notesLabel.innerText = "Notes"
        // let br4 = document.createElement("br");
        let notes = document.createElement("textarea");
        notes.setAttribute("rows", "5")
        notes.setAttribute("cols", "30")
        notes.setAttribute("name", "notes")
        notes.classList.add("notes_text")

        divRight.appendChild(notesLabel);
        divRight.appendChild(notes);


        divModalTop.appendChild(divRight);
        container.appendChild(divModalTop);

        let divModalBottom = document.createElement("div");
        divModalBottom.classList.add("horizontal_bottom")
        let hr = document.createElement("hr");
        container.appendChild(hr);

        // let divNewConditions = document.createElement("div");

        // let divNewConditionsArray = ["none selected", "concentration", "blinded", "charmed", "deafened", "frightened", "grappled", "incapacitated", "invisible", "paralyzed", "petrified", "poisoned", "prone", "restrained", "stunned", "unconscious", "exhaustion", "ready", "death save"]
        // divNewConditionsArray.forEach((condition) => {
        //     let actionsRadio = document.createElement("input");
        //     actionsRadio.setAttribute("type", "radio");
        //     actionsRadio.setAttribute("value", condition);
        //     actionsRadio.setAttribute("id", condition);
        //     actionsRadio.setAttribute("name", "conditions");
        //     let label = document.createElement("label");
        //     label.setAttribute("for", condition);
        //     label.classList.add("radio_buttons");
        //     label.innerHTML = condition;
        //     let br = document.createElement("br");
        //     divNewConditions.appendChild(actionsRadio);
        //     divNewConditions.appendChild(label);
        //     divNewConditions.appendChild(br);
        // })


        // let conditionText = document.createElement("input");
        // conditionText.setAttribute("type", "text");
        // // weaponTextInput.setAttribute("value", item.toolID);
        // // weaponTextInput.setAttribute("id", item.toolID);
        // conditionText.setAttribute("name", "weapons");
        // conditionText.classList.add("text_field");
        // let label2 = document.createElement("label");

        // // label1.setAttribute("for", item.toolID);
        // let br5 = document.createElement("br");
        // divBottomLeft.appendChild(conditionText);
        // divBottomLeft.appendChild(label2);
        // divBottomLeft.appendChild(br5);

        // divBottomLeft.appendChild(divNewConditions);


        // let divBottomRight = document.createElement("div");
        // divBottomRight.classList.add("div_bottom_right")

        let condition = conditionsInEffect.filter((condition) => {
            let conditionParticipant = condition.pID
            let startHTML = document.querySelector('[data-round="' + condition.start_round + '"] [data-section="1"] [data-participant="' + condition.pID + '"]')
            let start = startHTML.getAttribute('data-nav')
            let endHTML = document.querySelector('[data-round="' + condition.end_round + '"] [data-section="1"] [data-participant="' + condition.end_pID + '"]') || "100";
            let end = endHTML instanceof Element ? endHTML.getAttribute('data-nav') : "1000";
            if (dataNavSelected >= start && dataNavSelected <= end) {
                let checkbox = document.createElement("input");
                checkbox.setAttribute("type", "checkbox");
                checkbox.setAttribute("name", "conditions")
                checkbox.setAttribute("value", condition.conditionID);
                let label = document.createElement("label");
                label.setAttribute("for", condition.condition_name);
                let causer = ctApp.find((participant) => {
                    return condition.pID == participant.pID
                }).character_name
                let affected = ctApp.find((participant) => {
                    return condition.target_affected == participant.pID
                }).character_name
                let numeric = ctApp.find((participant) => {
                    return condition.target_affected == participant.pID
                }).numeric_value
                label.innerHTML = condition.condition_name + ": " + causer + " => <b>" + affected + (numeric ? " #" + numeric : "") + "</b> / " + condition.description
                let br6 = document.createElement("br")
                divModalBottom.appendChild(checkbox)
                divModalBottom.appendChild(label)
                divModalBottom.appendChild(br6);
            }
        })

        // add dropdowns for new conditions to start
        // blinded, charmed, deafened, frightened, grappled, incapacitated, invisible, paralyzed,
        // petrified, poisoned, prone, restrained, stunned, unconscious, exhaustion, concentrating
        // ready
        // death save
        // notes section (e.g. "next attack on Spider #1 has disadvantage until end of Honza's turn in round 3")


        // divModalBottom.appendChild(divBottomLeft);
        // divModalBottom.appendChild(divBottomRight);
        container.appendChild(divModalBottom)

        let buttonContainer = document.createElement("div")
        buttonContainer.classList.add("button_container")
        let submit = document.createElement("button");
        submit.innerText = "SUBMIT"
        submit.setAttribute("onclick", "submitAction()")

        buttonContainer.appendChild(submit)

        container.appendChild(buttonContainer)

        modal.innerHTML = container.outerHTML;


    }

    async function submitAction() {
        // get current round
        let html = document.querySelector(".selected");
        let currentRound = html.getAttribute("data-round");
        let pID = html.getAttribute("data-participant");
        // determine next available action number
        let nextAID = await dbQuery("GET", "getNewAID")
        nextAID = nextAID[0].aID + 1;
        // determine next available targetID
        let nextTargetID = await dbQuery("GET", "getNextTargetID")
        nextTargetID = nextTargetID[0].tID + 1;

        // get weapon radio buttons
        let weapons = document.getElementsByName("weapons");
        let weapon = Array.from(weapons).find((weapon) => {
            return weapon.checked == true;
        })?.value || 0;
        let action;
        if (parseInt(weapon) == NaN) {
            action = weapon;
        }

        // determine hits and combine them into string, like "0/1" (for miss/hit)
        let targets = document.getElementsByName("participants");
        let targetHits = ""
        let tID = ""
        let damage = ""
        targets.forEach((target) => {
            if (parseInt(target.value) != NaN && target.value != 0) {
                targetHits += "1"
                tID += target.id + " "
                damage += target.value + " "
            } else if (target.value == "0") {
                targetHits += "0"
                tID += target.id + " "
                damage += target.value + " "
            }
        })
        console.log(damage);
        if (targetHits == "") {
            targetHits = "null"
        }
        // get action type
        let actionTypeElement = document.getElementsByName("actions")
        let actionType = Array.from(actionTypeElement).find((item) => {
            return item.checked == true
        }).value

        let notesElement = document.querySelector(".notes_text");
        let notes = notesElement.value;
        notes = notes.replaceAll("'", "\'")

        let disableConditionsEle = document.getElementsByName("conditions")
        let disableConditionsString = ""
        disableConditionsEle.forEach((condition) => {
            if (condition.checked == true) {
                disableConditionsString += condition.value
            }
        })

        let data = "submitAction/" + nextAID + "/" + ctApp[0].eID + "/" + currentRound + "/" + weapon + "/" + action + "/" + pID + "/" + tID + "/" + targetHits + "/" + actionType + "/" + damage + "/" + notes + "/" + disableConditionsString + "/" + nextAID + "/" + nextToolID
        // await dbQuery("POST", data)
    }
</script>